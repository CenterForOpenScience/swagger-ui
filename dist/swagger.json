{
    "swagger": "2.0",
    "info": {
        "title": "OSF APIv2 Documentation",
        "version": "2.0",
        "description": "Welcome to the V2 Open Science Framework API. With this API you can access users, projects, components, registrations, preprints, logs, and files on the Open Science Framework.",
        "contact": {
            "name": "OSF",
            "email": "support@osf.io",
            "url": "https://osf.io/support"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "host": "localhost:8000",
    "basePath": "/v2",
    "paths": {
        "/": {
            "get": {
                "description": "Welcome to the V2 Open Science Framework API. With this API you can access users, projects, components, logs, and files\nfrom the [Open Science Framework](https://osf.io/). The Open Science Framework (OSF) is a free, open-source service\nmaintained by the [Center for Open Science](http://cos.io/).\n\nThe OSF serves as a repository and archive for study designs, materials, data, manuscripts, or anything else\nassociated with your research during the research process. Every project and file on the OSF has a permanent unique\nidentifier, and every registration (a permanent, time-stamped version of your projects and files) can be assigned a\nDOI/ARK. You can use the OSF to measure your impact by monitoring the traffic to projects and files you make\npublic. With the OSF you have full control of what parts of your research are public and what remains private.\n\nBeta notice: This API is currently a beta service.  You are encouraged to use the API and will receive support\nwhen doing so, however, while the API remains in beta status, it may change without notice as a result of\nproduct updates. The temporary beta status of the API will remain in place while it matures. In a future\nrelease, the beta status will be removed, at which point we will provide details on how long we will support\nthe API V2 and under what circumstances it might change.\n\n#General API Usage\n\nThe OSF API generally conforms to the [JSON-API v1.0 spec](http://jsonapi.org/format/1.0/).  Where exceptions\nexist, they will be noted.  Each endpoint will have its own documentation, but there are some general principles.\n\n##Requests\n\n###Canonical URLs\n\nAll canonical URLs have trailing slashes.  A request to an endpoint without a trailing slash will result in a 301\nredirect to the canonical URL.  There are some exceptions when working with the Files API, so if a URL in a response\ndoes not have a slash, do not append one.\n\n###Plurals\n\nEndpoints are always pluralized.  `/users/`, not `/user/`, `/nodes/`, not `/node/`.\n\n###Common Actions\n\nEvery endpoint in the OSF API responds to `GET`, `HEAD`, and `OPTION` requests.  You must have adequate permissions\nto interact with the endpoint.  Unauthorized use will result in 401 Unauthorized or 403 Forbidden responses.  Use\n`HEAD` to probe an endpoint and make sure your headers are well-formed.  `GET` will return a representation of the\nentity or entity collection referenced by the endpoint.  An `OPTIONS` request will return a JSON object that describes the\nendpoint, including the name, a description, the acceptable request formats, the allowed response formats, and any\nactions available via the endpoint.\n\n###Versioning\nVersioning can be specified in three different ways:\n\n1. URL Path Versioning, e.g. `/v2/` or `/v3/`\n\n+ A version specified via the URL path is a **required** part of the URL.\n\n+ Only a major version can be specified via the URL path, i.e. `/v2.0.6/` is invalid,\nadditionally, paths such as `/v2.0/` are invalid.\n\n+ If the default version of the API is within the major version specified in the URL path,\nthe default version will be applied (i.e. if the default version is `2.3` and the URL path is `/v2/`,\nthen version returned will be `2.3`).\n\n+ If the default version of the API is not within the major version specified in the URL path,\nthe URL path version will be applied (i.e. if the default version is `3.0` and the URL path is `/v2/`,\nthen the version returned will be `2.0`)\n\n2. Query Parameter Versioning, e.g. `/v2/nodes/?version=2.1.6`\n\n+ Pinning to a specific version via a query parameter is **optional**.\n\n+ A specific version (major, minor, or patch) for a single request can be specified via the `version`\nquery parameter, as long as it is an allowed version.\n\n+ If the version specified in the query parameter does not fall within the same major version\nspecified in the URL path, i.e `/v2/nodes/?version=3.1.4` a `409 Conflict` response will be returned.\n\n3.  Header Versioning, e.g. `Accept-Header=application/vnd.api+json;version=3.0.1`\n\n+ Pinning to a specific version via request header is **optional**.\n\n+ A specific version (major, minor, or patch) for a single request can be specified\nvia the `Accept Header` of the request, as long as it is an allowed version.\n\n+ If the version specified in the header does not fall within the same major version specified\nin the URL path a `409 Conflict` response will be returned.\n\n+ If both a header version and query parameter version are specified, the versions must match exactly\nor a `409 Conflict` response will be returned (i.e. one does not take precedence over the other).\n\n###Filtering\n\nEntity collections can be filtered by adding a query parameter in the form:\n\nfilter[<fieldname>]=<matching information>\n\nString queries are filtered using substring matching. For example, if you were trying to find [Lise\nMeitner](http://en.wikipedia.org/wiki/Lise_Meitner):\n\n/users/?filter[full_name]=meitn\n\nYou can filter on multiple fields, or the same field in different ways, by &-ing the query parameters together.\n\n/users/?filter[full_name]=lise&filter[family_name]=mei\n\nBoolean fields should be queried with `true` or `false`.\n\n/nodes/?filter[registered]=true\n\nYou can request multiple resources by filtering on id and placing comma-separated values in your query parameter.\n\n/nodes/?filter[id]=aegu6,me23a\n\nYou can filter with case-sensitivity or case-insensitivity by using `contains` and `icontains`, respectively.\n\n/nodes/?filter[tags][icontains]=help\n\n###Embedding\n\nAll related resources that appear in the `relationships` attribute are embeddable, meaning that\nby adding a query parameter like:\n\n/nodes/?embed=contributors\n\nit is possible to fetch a Node and its contributors in a single request. The embedded results will have the following",
                "summary": "Welcome to the V2 Open Science Framework API. With this API you can access users, projects, components, logs, and files",
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "operationId": "read"
            }
        },
        "/addons/": {
            "get": {
                "description": "List of addons configurable with the OSF *Read-only*.\n\nPaginated list of addons associated with third-party services\n\n##Permissions\n\nNo restrictions.\n\n## <Addon> Attributes\n\nOSF <Addon\\> entities have the \"addons\" `type`, and their `id` indicates the\n`short_name` of the associated service provider (eg. `box`, `googledrive`, etc).\n\nname        type        description\n======================================================================================================\nurl         string      Url of this third-party service\nname        string      `full_name` of third-party service provider\ndescription string      Description of this addon\ncategories  list        List of categories this addon belongs to\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "addons"
                ],
                "summary": "List of addons configurable with the OSF *Read-only*.",
                "operationId": "addons_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/citations/styles/": {
            "get": {
                "description": "List of standard citation styles available for rendering citations. *Read-only*\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future**\n\n##Citation Attributes\n\nname           type               description\n=========================================================================\ndate_parsed        string             date the citation style was first added to the database\nsummary            string             summary of the citation style\nshort_title        string             a short name or nickname for the citation style\ntitle              string             official name of the citation style\n\n\nCitation style may be filtered by their 'title', 'short_title', 'summary', and 'id'",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "citations"
                ],
                "summary": "List of standard citation styles available for rendering citations. *Read-only*",
                "operationId": "citations_styles_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/citations/styles/{citation_id}/": {
            "get": {
                "description": "Detail for a citation style *Read-only*\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future**\n\n##Citation Attributes\n\nname           type               description\n=========================================================================\ndate_parsed        string             date the citation style was first added to the database\nsummary            string             summary of the citation style\nshort_title        string             a short name or nickname for the citation style\ntitle              string             official name of the citation style",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "citation_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "citations"
                ],
                "summary": "Detail for a citation style *Read-only*",
                "operationId": "citations_styles_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/collections/": {
            "get": {
                "description": "Organizer Collections organize projects and components. *Writeable*.\n\nPaginated list of Project Organizer Collections ordered by their `date_modified`.\nEach resource contains the full representation of the project organizer collection, meaning additional\nrequests to an individual Organizer Collection's detail view are not necessary.\n\nThe Project Organizer is a tool to allow the user to make Collections of projects, components, and registrations\nfor whatever purpose the user might want to organize them. They make node_links to any Node that a user has\nread access to. Collections through this API do not nest. Currently Collections are private to any individual user,\nthough that could change one day.\n\n##Collection Attributes\n\nOSF Organizer Collection entities have the \"nodes\" `type`.\n\nname           type               description\n=================================================================================\ntitle          string             title of Organizer Collection\ndate_created   iso8601 timestamp  timestamp that the collection was created\ndate_modified  iso8601 timestamp  timestamp when the collection was last updated\n\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n###Creating New Organizer Collections",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Organizer Collections organize projects and components. *Writeable*.",
                "operationId": "collections_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/collections/{collection_id}/": {
            "get": {
                "description": "Details about Organizer Collections. *Writeable*.\n\nThe Project Organizer is a tool to allow the user to make Collections of projects, components, and registrations\nfor whatever purpose the user might want to organize them. They make node_links to any Node that a user has\nread access to. Collections through this API do not nest. Currently Collections are private to any individual user,\nthough that could change one day.\n\n##Collection Attributes\n\nOSF Organizer Collection entities have the \"nodes\" `type`.\n\nname           type               description\n=================================================================================\ntitle          string             title of Organizer Collection\ndate_created   iso8601 timestamp  timestamp that the collection was created\ndate_modified  iso8601 timestamp  timestamp when the collection was last updated\n\n##Relationships\n\n###Node links\n\nNode links are pointers or aliases to nodes. This relationship lists all of the nodes that the Organizer Collection\nis pointing to. New node links can be created with this collection.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "collection_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Details about Organizer Collections. *Writeable*.",
                "operationId": "collections_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/collections/{collection_id}/linked_nodes/": {
            "get": {
                "description": "List of nodes linked to this node. *Read-only*.\n\nLinked nodes are the project/component nodes pointed to by node links. This view will probably replace node_links in the near future.\n\n<!--- Copied Spiel from NodeDetail -->\n\nOn the front end, nodes are considered 'projects' or 'components'. The difference between a project and a component\nis that a project is the top-level node, and components are children of the project. There is also a [category\nfield](/v2/#osf-node-categories) that includes 'project' as an option. The categorization essentially determines\nwhich icon is displayed by the node in the front-end UI and helps with search organization. Top-level nodes may have\na category other than project, and children nodes may have a category of project.\n\n##Linked Node Attributes\n\n<!--- Copied Attributes from NodeDetail -->\n\nOSF Node entities have the \"nodes\" `type`.\n\nname           type               description\n=================================================================================\ntitle          string             title of project or component\ndescription    string             description of the node\ncategory       string             node category, must be one of the allowed values\ndate_created   iso8601 timestamp  timestamp that the node was created\ndate_modified  iso8601 timestamp  timestamp when the node was last updated\ntags           array of strings   list of tags that describe the node\nregistration   boolean            is this is a registration?\ncollection     boolean            is this node a collection of other nodes?\npublic         boolean            has this node been made publicly-visible?\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Query Params\n\n+ `page=<Int>` -- page number of results to view, default 1\n\n+ `filter[<fieldname>]=<Str>` -- fields and values to filter the search results on.\n\nNodes may be filtered by their `title`, `category`, `description`, `public`, `registration`, or `tags`.  `title`,\n`description`, and `category` are string fields and will be filtered using simple substring matching.  `public` and\n`registration` are booleans, and can be filtered using truthy values, such as `true`, `false`, `0`, or `1`.  Note\nthat quoting `true` or `false` in the query will cause the match to fail regardless.  `tags` is an array of simple strings.\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "collection_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "collections"
                ],
                "summary": "List of nodes linked to this node. *Read-only*.",
                "operationId": "collections_linked_nodes_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/collections/{collection_id}/linked_registrations/": {
            "get": {
                "description": "List of registrations linked to this node. *Read-only*.\n\nLinked registrations are the registration nodes pointed to by node links.\n\n<!--- Copied Spiel from RegistrationDetail -->\nRegistrations are read-only snapshots of a project. This view shows details about the given registration.\n\nEach resource contains the full representation of the registration, meaning additional requests to an individual\nregistration's detail view are not necessary. A withdrawn registration will display a limited subset of information,\nnamely, title, description, date_created, registration, withdrawn, date_registered, withdrawal_justification, and\nregistration supplement. All other fields will be displayed as null. Additionally, the only relationships permitted\nto be accessed for a withdrawn registration are the contributors - other relationships will return a 403.\n\n##Linked Registration Attributes\n\n<!--- Copied Attributes from RegistrationDetail -->\n\nRegistrations have the \"registrations\" `type`.\n\nname                            type               description\n=======================================================================================================\ntitle                           string             title of the registered project or component\ndescription                     string             description of the registered node\ncategory                        string             bode category, must be one of the allowed values\ndate_created                    iso8601 timestamp  timestamp that the node was created\ndate_modified                   iso8601 timestamp  timestamp when the node was last updated\ntags                            array of strings   list of tags that describe the registered node\ncurrent_user_can_comment        boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions        array of strings   list of strings representing the permissions for the current user on this node\nfork                            boolean            is this project a fork?\nregistration                    boolean            has this project been registered? (always true - may be deprecated in future versions)\ncollection                      boolean            is this registered node a collection? (always false - may be deprecated in future versions)\nnode_license                    object             details of the license applied to the node\nyear                            string             date range of the license\ncopyright_holders               array of strings   holders of the applied license\npublic                          boolean            has this registration been made publicly-visible?\nwithdrawn                       boolean            has this registration been withdrawn?\ndate_registered                 iso8601 timestamp  timestamp that the registration was created\nembargo_end_date                iso8601 timestamp  when the embargo on this registration will be lifted (if applicable)\nwithdrawal_justification        string             reasons for withdrawing the registration\npending_withdrawal              boolean            is this registration pending withdrawal?\npending_withdrawal_approval     boolean            is this registration pending approval?\npending_embargo_approval        boolean            is the associated Embargo awaiting approval by project admins?\nregistered_meta                 dictionary         registration supplementary information\nregistration_supplement         string             registration template\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Query Params\n\n+ `page=<Int>` -- page number of results to view, default 1\n\n+ `filter[<fieldname>]=<Str>` -- fields and values to filter the search results on.\n\nNodes may be filtered by their `title`, `category`, `description`, `public`, `registration`, or `tags`.  `title`,\n`description`, and `category` are string fields and will be filtered using simple substring matching.  `public` and\n`registration` are booleans, and can be filtered using truthy values, such as `true`, `false`, `0`, or `1`.  Note\nthat quoting `true` or `false` in the query will cause the match to fail regardless.  `tags` is an array of simple strings.\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "collection_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "collections"
                ],
                "summary": "List of registrations linked to this node. *Read-only*.",
                "operationId": "collections_linked_registrations_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/collections/{collection_id}/node_links/": {
            "get": {
                "description": "Node Links to other nodes. *Writeable*.\n\n# Deprecated\n\nThe use of /collections/ID/node_links/ is deprecated in favor of linked_nodes, linked_registrations or a combination of both.\n\n## Known Issue\n\nLinked nodes of type 'registrations' will be returned with an error 'Not found.' in the {embeds: target_node: {}} object.\n\n\nNode Links act as pointers to other nodes. Unlike Forks, they are not copies of nodes;\nNode Links are a direct reference to the node that they point to.\n\n##Node Link Attributes\n\n*None*\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n###Create",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "collection_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Node Links to other nodes. *Writeable*.",
                "operationId": "collections_node_links_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/collections/{collection_id}/node_links/{node_link_id}/": {
            "get": {
                "description": "Node Link details. *Writeable*.\n\nNode Links act as pointers to other nodes. Unlike Forks, they are not copies of nodes;\nNode Links are a direct reference to the node that they point to.\n\n##Attributes\n\n*None*\n\n##Relationships\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "collection_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_link_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Node Link details. *Writeable*.",
                "operationId": "collections_node_links_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/collections/{collection_id}/relationships/linked_nodes/": {
            "get": {
                "description": "Relationship Endpoint for Collection -> Linked Node relationships\n\nUsed to set, remove, update and retrieve the ids of the linked nodes attached to this collection. For each id, there\nexists a node link that contains that node.\n\n##Actions\n\n###Create",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "collection_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Relationship Endpoint for Collection -> Linked Node relationships",
                "operationId": "collections_relationships_linked_nodes_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/collections/{collection_id}/relationships/linked_registrations/": {
            "get": {
                "description": "Relationship Endpoint for Collection -> Linked Registration relationships\n\nUsed to set, remove, update and retrieve the ids of the linked registrations attached to this collection. For each id, there\nexists a node link that contains that node.\n\n##Actions\n\n###Create",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "collection_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Relationship Endpoint for Collection -> Linked Registration relationships",
                "operationId": "collections_relationships_linked_registrations_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/comments/{comment_id}/": {
            "get": {
                "description": "Details about a specific comment. *Writeable*.\n\n###Permissions\n\nComments on public nodes are given read-only access to everyone. Comments on private nodes are only visible\nto contributors and administrators on the parent node. Only the user who created the comment has permission\nto edit and delete the comment.\n\nNote that if an anonymous view_only key is being used, the user relationship will not be exposed.\n\n##Attributes\n\nOSF comment entities have the \"comments\" `type`.\n\nname           type               description\n=================================================================================\ncontent        string             content of the comment\ndate_created   iso8601 timestamp  timestamp that the comment was created\ndate_modified  iso8601 timestamp  timestamp when the comment was last updated\nmodified       boolean            has this comment been edited?\ndeleted        boolean            is this comment deleted?\nis_abuse       boolean            is this flagged or confirmed spam?\nis_ham         boolean            has admin checked the legitimacy of this comment?\nhas_report     boolean            has the current user reported this as spam?\nhas_children   boolean            does this comment have replies?\ncan_edit       boolean            can the current user edit this comment?\n\n##Relationships\n\n###User\n\nThe user who created the comment.\n\n###Node\n\nThe project associated with this comment.\n\n###Target\n\nThe \"parent\" of the comment. If the comment was made on a node, the target is the node. If the comment\nis a reply, its target is the comment it was in reply to.\n\n###Replies\nList of replies to this comment. New replies can be created through this endpoint.\n\n###Reports\nList of spam reports for this comment. Only users with permission to create comments can\naccess this endpoint, and users can only see reports that they have created.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "comment_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Details about a specific comment. *Writeable*.",
                "operationId": "comments_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/files/{file_id}/": {
            "get": {
                "description": "Details about files and folders. *Writeable*.\n\nWelcome to the Files API.  Brace yourself, things are about to get *weird*.\n\nThe Files API is the one place in the OSF API where we break hard from the JSON-API spec.  This is because most of\nthe behind-the-scenes moving, uploading, deleting, etc. of files and folders is actually handled for us by a\nnifty piece of software called [WaterButler](https://github.com/CenterForOpenScience/waterbutler).  WaterButler lets\nus interact with files stored on different cloud storage platforms through a consistent API.  However, it uses\ndifferent conventions for requests, responses, and URL-building, so pay close attention to the documentation for\n[actions](#actions).  The exception is the \"Get Info\" action, which is OSF-centric.\n\nOnly files and folders which have previously been retrieved through the Node Files List endpoint (accessible through\nthe `files` relationship of their parent nodes) can be accessed through this endpoint.  Viewing a folder through the\nNode Files List vivifies their children's metadata in the OSF and allows the children to be assigned ids.  This\nmetadata is cached and can be refreshed by GETting the file via the Node Files List endpoint.\n\nBoth files and folders are available through the Files API and are distinguished by the `kind` attribute (\"file\" for\nfiles, \"folder\" for folders).  Not all actions and relationships are relevant to both files and folders, so the\napplicable types are listed by each heading.\n\n###Waterbutler Entities\n\nWhen an action is performed against a WaterButler endpoint, it will generally respond with a file entity, a folder\nentity, or no content.\n\n####File Entity\n\nname            type              description\n=========================================================================\nguid            string            OSF GUID for this file (if one has been assigned)\nname            string            name of the file\npath            string            unique identifier for this file entity for this\nproject and storage provider. may not end with '/'\nmaterialized    string            the full path of the file relative to the storage\nroot.  may not end with '/'\nkind            string            \"file\"\netag            string            etag - http caching identifier w/o wrapping quotes\nmodified        timestamp         last modified timestamp - format depends on provider\ncontentType     string            MIME-type when available\nprovider        string            id of provider e.g. \"osfstorage\", \"s3\", \"googledrive\".\nequivalent to addon_short_name on the OSF\nsize            integer           size of file in bytes\ncurrent_version integer           current file version\ntags            array of strings  list of tags that describes the file (osfstorage only)\nextra           object            may contain additional data beyond what's described here,\ndepending on the provider\nversion       integer           version number of file. will be 1 on initial upload\ndownloads     integer           count of the number times the file has been downloaded\nhashes        object\nmd5         string            md5 hash of file\nsha256      string            SHA-256 hash of file\n\n####Folder Entity\n\nname          type    description\n======================================================================\nname          string  name of the folder\npath          string  unique identifier for this folder entity for this\nproject and storage provider. must end with '/'\nmaterialized  string  the full path of the folder relative to the storage\nroot.  must end with '/'\nkind          string  \"folder\"\netag          string  etag - http caching identifier w/o wrapping quotes\nextra         object  varies depending on provider\n\n\n##Attributes\n\nFor an OSF File entity, the `type` is \"files\" regardless of whether the entity is actually a file or folder, because\nit belongs to the `files` collection of the API.  They can be distinguished by the `kind` attribute.  Files and\nfolders use the same representation, but some attributes may be null for one kind but not the other. `size` will be\nnull for folders.  A list of storage provider keys can be found [here](/v2/#storage-providers).\n\nname                        type               description\n================================================================================================================\nname                        string             name of the file or folder; used for display\nkind                        string             \"file\" or \"folder\"\npath                        string             same as for corresponding WaterButler entity\nmaterialized_path           string             the unix-style path to the file relative to the provider root\nsize                        integer            size of file in bytes, null for folders\nprovider                    string             storage provider for this file. \"osfstorage\" if stored on the\nOSF.  other examples include \"s3\" for Amazon S3, \"googledrive\"\nfor Google Drive, \"box\" for Box.com.\ncurrent_user_can_comment    boolean            Whether the current user is allowed to post comments\n\nlast_touched                iso8601 timestamp  last time the metadata for the file was retrieved. only\napplies to non-OSF storage providers.\ndate_modified               iso8601 timestamp  timestamp of when this file was last updated*\ndate_created                iso8601 timestamp  timestamp of when this file was created*\nextra                       object             may contain additional data beyond what's described here,\ndepending on the provider\nhashes                      object\nmd5                         string             md5 hash of file, null for folders\nsha256                      string             SHA-256 hash of file, null for folders\n\n* A note on timestamps: for files stored in osfstorage, `date_created` refers to the time the file was\nfirst uploaded to osfstorage, and `date_modified` is the time the file was last updated while in osfstorage.\nOther providers may or may not provide this information, but if they do it will correspond to the provider's\nsemantics for created/modified times.  These timestamps may also be stale; metadata retrieved via the File Detail\nendpoint is cached.  The `last_touched` field describes the last time the metadata was retrieved from the external\nprovider.  To force a metadata update, access the parent folder via its Node Files List endpoint.\n\n##Relationships\n\n###Node\n\nThe `node` endpoint describes the project or registration that this file belongs to.\n\n###Files (*folders*)\n\nThe `files` endpoint lists all of the subfiles and folders of the current folder. Will be null for files.\n\n###Versions (*files*)\n\nThe `versions` endpoint provides version history for files.  Will be null for folders.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "file_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "files"
                ],
                "summary": "Details about files and folders. *Writeable*.",
                "operationId": "files_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/files/{file_id}/versions/": {
            "get": {
                "description": "List of versions for the requested file. *Read-only*.\n\nPaginated list of file versions, ordered by the date each version was created/modified.\n\n<!--- Copied Spiel from FileVersionDetail -->\n\nA specific version of an uploaded file.  Note that the version is tied to the id/path, so two versions of the same\nfile could have completely different contents and formats.  That's on you, though.  Don't do that.\n\nUnlike the OSF File entity which can represent files and folders, FileVersions only ever represent files. When a\nfile is first uploaded to the \"osfstorage\" provider through the API it is assigned version 1.  Each time it is\nupdated through the API, the version number is incremented.  Files stored on other providers will follow that\nprovider's versioning semantics.\n\n##FileVersion Attributes\n\n<!--- Copied Attributes from FileVersionDetail -->\n\nFor an OSF FileVersion entity the API `type` is \"file_versions\".\n\nname          type     description\n=================================================================================\nsize          integer  size of file in bytes\ncontent_type  string   MIME content-type for the file. May be null if unavailable.\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n*None*.\n\n##Query Params\n\n+ `page=<Int>` -- page number of results to view, default 1\n\n+ `filter[<fieldname>]=<Str>` -- fields and values to filter the search results on.\n\nFile versions may be filtered by their `id`, `size`, or `content_type`.\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "file_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "files"
                ],
                "summary": "List of versions for the requested file. *Read-only*.",
                "operationId": "files_versions_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/files/{file_id}/versions/{version_id}/": {
            "get": {
                "description": "Details about a specific file version. *Read-only*.\n\nA specific version of an uploaded file.  Note that the version is tied to the id/path, so two versions of the same\nfile could have completely different contents and formats.  That's on you, though.  Don't do that.\n\nUnlike the OSF File entity which can represent files and folders, FileVersions only ever represent files. When a\nfile is first uploaded through the API it is assigned version 1.  Each time it is updated through the API, the\nversion number is incremented.\n\n##Attributes\n\nFor an OSF FileVersion entity the API `type` is \"file_versions\".\n\nname          type     description\n=================================================================================\nsize          integer  size of file in bytes\ncontent_type  string   MIME content-type for the file. May be null if unavailable.\n\n##Relationships\n\n*None*.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "file_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "version_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "files"
                ],
                "summary": "Details about a specific file version. *Read-only*.",
                "operationId": "files_versions_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/guids/{guids}/": {
            "get": {
                "description": "Find an item by its guid.\n\nThis endpoint will redirect you to the most appropriate URL given an OSF GUID. For example, /v2/guids/{node_id},\nwill redirect to /v2/nodes/{node_id} while /v2/guids/{user_id} will redirect to /v2/users/{user_id}. If the GUID\ndoes not resolve, you will receive a 410 GONE response. If the GUID corresponds to an item that does not have a\ncorresponding endpoint (e.g. wiki pages), you will receive a 501 NOT_IMPLEMENTED response.\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "guids",
                        "in": "path"
                    }
                ],
                "tags": [
                    "guids"
                ],
                "summary": "Find an item by its guid.",
                "operationId": "guids_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/identifiers/{identifier_id}/": {
            "get": {
                "description": "List of identifiers for a specified node. *Read-only*.\n\n\n##Identifier Attributes\n\nOSF Identifier entities have the \"identifiers\" `type`.\n\nname           type                   description\n----------------------------------------------------------------------------\ncategory       string                 e.g. 'ark', 'doi'\nvalue          string                 the identifier value itself\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "identifier_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "identifiers"
                ],
                "summary": "List of identifiers for a specified node. *Read-only*.",
                "operationId": "identifiers_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/identifiers/{node_id}/identifiers/": {
            "get": {
                "description": "List of identifiers for a specified node. *Read-only*.\n\n##Identifier Attributes\n\nOSF Identifier entities have the \"identifiers\" `type`.\n\nname           type                   description\n----------------------------------------------------------------------------\ncategory       string                 e.g. 'ark', 'doi'\nvalue          string                 the identifier value itself\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "identifiers"
                ],
                "summary": "List of identifiers for a specified node. *Read-only*.",
                "operationId": "identifiers_identifiers_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/institutions/": {
            "get": {
                "description": "Paginated list of verified Institutions affiliated with COS\n\n##Institution Attributes\n\nOSF Institutions have the \"institutions\" `type`.\n\nname           type               description\n=========================================================================\nname           string             title of the institution\nid             string             unique identifier in the OSF\nlogo_path      string             a path to the institution's static logo\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "institutions"
                ],
                "summary": "Paginated list of verified Institutions affiliated with COS",
                "operationId": "institutions_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/institutions/{institution_id}/": {
            "get": {
                "description": "Details about a given institution.\n\n##Attributes\n\nOSF Institutions have the \"institutions\" `type`.\n\nname           type               description\n=========================================================================\nname           string             title of the institution\nid             string             unique identifier in the OSF\nlogo_path      string             a path to the institution's static logo\n\n##Relationships\n\n###Nodes\nList of nodes that have this institution as its primary institution.\n\n###Users\nList of users that are affiliated with this institution.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "institution_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "institutions"
                ],
                "summary": "Details about a given institution.",
                "operationId": "institutions_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/institutions/{institution_id}/nodes/": {
            "get": {
                "description": "Nodes that have selected an institution as their primary institution.\n\n##Permissions\nOnly public nodes or ones in which current user is a contributor.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "institution_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "institutions"
                ],
                "summary": "Nodes that have selected an institution as their primary institution.",
                "operationId": "institutions_nodes_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/institutions/{institution_id}/registrations/": {
            "get": {
                "description": "Registrations have selected an institution as their primary institution.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "institution_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "institutions"
                ],
                "summary": "Registrations have selected an institution as their primary institution.",
                "operationId": "institutions_registrations_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/institutions/{institution_id}/relationships/nodes/": {
            "get": {
                "description": "Relationship Endpoint for Institution -> Nodes Relationship\n\nUsed to set, remove, update and retrieve the affiliated_institution of nodes with this institution\n\n##Actions\n\n###Create",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "institution_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "institutions"
                ],
                "summary": "Relationship Endpoint for Institution -> Nodes Relationship",
                "operationId": "institutions_relationships_nodes_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/institutions/{institution_id}/users/": {
            "get": {
                "description": "Users that have been authenticated with the institution.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "institution_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "institutions"
                ],
                "summary": "Users that have been authenticated with the institution.",
                "operationId": "institutions_users_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/licenses/": {
            "get": {
                "description": "List of licenses available to Nodes. *Read-only*.\n\n\n##License Attributes\n\nOSF License entities have the \"licenses\" `type`.\n\nname           type                   description\n----------------------------------------------------------------------------\nname           string                 Name of the license\ntext           string                 Full text of the license\n\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n*None*.\n\n##Query Params\n\nLicenses may be filtered by their name and id.\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "licenses"
                ],
                "summary": "List of licenses available to Nodes. *Read-only*.",
                "operationId": "licenses_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/licenses/{license_id}/": {
            "get": {
                "tags": [
                    "licenses"
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "license_id",
                        "in": "path"
                    }
                ],
                "operationId": "licenses_read"
            }
        },
        "/logs/{log_id}/": {
            "get": {
                "description": "Details about a given Node Log. *Read-only*.\n\nOn the front end, logs show record and show actions done on the OSF. The complete list of loggable actions (in the format {identifier}: {description}) is as follows:\n\n* 'project_created': A Node is created\n* 'project_registered': A Node is registered\n* 'project_deleted': A Node is deleted\n* 'created_from': A Node is created using an existing Node as a template\n* 'pointer_created': A Pointer is created\n* 'pointer_forked': A Pointer is forked\n* 'pointer_removed': A Pointer is removed\n* 'node_removed': A component is deleted\n* 'node_forked': A Node is forked\n---\n* 'made_public': A Node is made public\n* 'made_private': A Node is made private\n* 'tag_added': A tag is added to a Node\n* 'tag_removed': A tag is removed from a Node\n* 'edit_title': A Node's title is changed\n* 'edit_description': A Node's description is changed\n* 'updated_fields': One or more of a Node's fields are changed\n* 'external_ids_added': An external identifier is added to a Node (e.g. DOI, ARK)\n---\n* 'contributor_added': A Contributor is added to a Node\n* 'contributor_removed': A Contributor is removed from a Node\n* 'contributors_reordered': A Contributor's position in a Node's bibliography is changed\n* 'permissions_updated': A Contributor's permissions on a Node are changed\n* 'made_contributor_visible': A Contributor is made bibliographically visible on a Node\n* 'made_contributor_invisible': A Contributor is made bibliographically invisible on a Node\n---\n* 'wiki_updated': A Node's wiki is updated\n* 'wiki_deleted': A Node's wiki is deleted\n* 'wiki_renamed': A Node's wiki is renamed\n* 'made_wiki_public': A Node's wiki is made public\n* 'made_wiki_private': A Node's wiki is made private\n---\n* 'addon_added': An add-on is linked to a Node\n* 'addon_removed': An add-on is unlinked from a Node\n* 'addon_file_moved': A File in a Node's linked add-on is moved\n* 'addon_file_copied': A File in a Node's linked add-on is copied\n* 'addon_file_renamed': A File in a Node's linked add-on is renamed\n* 'node_authorized': An addon is authorized for a project\n* 'node_deauthorized': An addon is deauthorized for a project\n* 'folder_created': A Folder is created in a Node's linked add-on\n* 'file_added': A File is added to a Node's linked add-on\n* 'file_updated': A File is updated on a Node's linked add-on\n* 'file_removed': A File is removed from a Node's linked add-on\n* 'file_restored': A File is restored in a Node's linked add-on\n---\n* 'comment_added': A Comment is added to some item\n* 'comment_removed': A Comment is removed from some item\n* 'comment_updated': A Comment is updated on some item\n---\n* 'embargo_initiated': An embargoed Registration is proposed on a Node\n* 'embargo_approved': A proposed Embargo of a Node is approved\n* 'embargo_cancelled': A proposed Embargo of a Node is cancelled\n* 'embargo_completed': A proposed Embargo of a Node is completed\n* 'retraction_initiated': A Withdrawal of a Registration is proposed\n* 'retraction_approved': A Withdrawal of a Registration is approved\n* 'retraction_cancelled': A Withdrawal of a Registration is cancelled\n* 'registration_initiated': A Registration of a Node is proposed\n* 'registration_approved': A proposed Registration is approved\n* 'registration_cancelled': A proposed Registration is cancelled\n---\n* 'node_created': A Node is created\n\n##Log Attributes\n\n<!--- Copied Attributes from LogList -->\n\nOSF Log entities have the \"logs\" `type`.\n\nname           type                   description\n----------------------------------------------------------------------------\ndate           iso8601 timestamp      timestamp of Log creation\naction         string                 Log action (see list above)\n\n##Relationships\n\n###Node\n\nThe node this log belongs to.\n\n###Original Node\n\nThe node this log pertains to.\n\n###User\n\nThe user who performed the logged action.\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n*None*.\n\n##Query Params\n\n<!--- Copied Query Params from LogList -->\n\nLogs may be filtered by their `action` and `date`.\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "log_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Details about a given Node Log. *Read-only*.",
                "operationId": "logs_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/metaschemas/": {
            "get": {
                "description": "<!--- Copied from MetaSchemaDetail -->\n\nMetaschemas describe the supplemental questions that accompany a registration.\nOnly active metaschemas are returned at this endpoint.\n\n##Metaschema Attributes\n\nMetaschemas have the \"metaschemas\" `type`.\n\nname                type               description\n===========================================================================\nname                string             name of registration schema\nschema_version      integer            latest version of the schema\nschema              dictionary         registration schema details\n\n\n##Links`\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n#This request/response",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "metaschemas"
                ],
                "summary": "<!--- Copied from MetaSchemaDetail -->",
                "operationId": "metaschemas_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/metaschemas/{metaschema_id}/": {
            "get": {
                "description": "Metaschemas describe the supplemental questions that accompany a registration.\n\n##Metaschema Attributes\n\nMetaschemas have the \"metaschemas\" `type`.\n\nname                type               description\n===========================================================================\nname                string             name of registration schema\nschema_version      integer            latest version of the schema\nschema              dictionary         registration schema details\n\n#This request/response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "metaschema_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "metaschemas"
                ],
                "summary": "Metaschemas describe the supplemental questions that accompany a registration.",
                "operationId": "metaschemas_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/": {
            "get": {
                "description": "Nodes that represent projects and components. *Writeable*.\n\nPaginated list of nodes ordered by their `date_modified`.  Each resource contains the full representation of the\nnode, meaning additional requests to an individual node's detail view are not necessary.  Registrations and withdrawn\nregistrations cannot be accessed through this endpoint (see registration endpoints instead).\n\n<!--- Copied Spiel from NodeDetail -->\n\nOn the front end, nodes are considered 'projects' or 'components'. The difference between a project and a component\nis that a project is the top-level node, and components are children of the project. There is also a [category\nfield](/v2/#osf-node-categories) that includes 'project' as an option. The categorization essentially determines\nwhich icon is displayed by the node in the front-end UI and helps with search organization. Top-level nodes may have\na category other than project, and children nodes may have a category of project.\n\n##Node Attributes\n\n<!--- Copied Attributes from NodeDetail -->\n\nOSF Node entities have the \"nodes\" `type`.\n\nname                            type               description\n=================================================================================\ntitle                           string             title of project or component\ndescription                     string             description of the node\ncategory                        string             node category, must be one of the allowed values\ndate_created                    iso8601 timestamp  timestamp that the node was created\ndate_modified                   iso8601 timestamp  timestamp when the node was last updated\ntags                            array of strings   list of tags that describe the node\ncurrent_user_can_comment        boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions        array of strings   list of strings representing the permissions for the current user on this node\nregistration                    boolean            is this a registration? (always false - may be deprecated in future versions)\nfork                            boolean            is this node a fork of another node?\npublic                          boolean            has this node been made publicly-visible?\npreprint                        boolean            is this a preprint?\ncollection                      boolean            is this a collection? (always false - may be deprecated in future versions)\nnode_license                    object             details of the license applied to the node\nyear                        string             date range of the license\ncopyright_holders           array of strings   holders of the applied license\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n###Creating New Nodes",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Nodes that represent projects and components. *Writeable*.",
                "operationId": "nodes_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/": {
            "get": {
                "description": "Details about a given node (project or component). *Writeable*.\n\nA registration or withdrawn registration cannot be accessed through this endpoint. See Registration Detail endpoint.\n\nOn the front end, nodes are considered 'projects' or 'components'. The difference between a project and a component\nis that a project is the top-level node, and components are children of the project. There is also a [category\nfield](/v2/#osf-node-categories) that includes 'project' as an option. The categorization essentially determines\nwhich icon is displayed by the node in the front-end UI and helps with search organization. Top-level nodes may have\na category other than project, and children nodes may have a category of project.\n\n###Permissions\n\nNodes that are made public will give read-only access to everyone. Private nodes require explicit read\npermission. Write and admin access are the same for public and private nodes. Administrators on a parent node have\nimplicit read permissions for all child nodes.\n\n##Attributes\n\nOSF Node entities have the \"nodes\" `type`.\n\nname                            type                description\n=================================================================================\ntitle                           string              title of project or component\ndescription                     string              description of the node\ncategory                        string              node category, must be one of the allowed values\ndate_created                    iso8601 timestamp   timestamp that the node was created\ndate_modified                   iso8601 timestamp   timestamp when the node was last updated\ntags                            array of strings    list of tags that describe the node\ncurrent_user_can_comment        boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions        array of strings    list of strings representing the permissions for the current user on this node\nregistration                    boolean             is this a registration? (always false - may be deprecated in future versions)\nfork                            boolean             is this node a fork of another node?\npublic                          boolean             has this node been made publicly-visible?\ncollection                      boolean             is this a collection? (always false - may be deprecated in future versions)\nnode_license                    object             details of the license applied to the node\nyear                            string             date range of the license\ncopyright_holders               array of strings   holders of the applied license\n\n##Relationships\n\n###Children\n\nList of nodes that are children of this node.  New child nodes may be added through this endpoint.\n\n###Comments\n\nList of comments on this node.  New comments can be left on the node through this endpoint.\n\n###Contributors\n\nList of users who are contributors to this node. Contributors may have \"read\", \"write\", or \"admin\" permissions.\nA node must always have at least one \"admin\" contributor.  Contributors may be added via this endpoint.\n\n###Draft Registrations\n\nList of draft registrations of the current node.\n\n###Files\n\nList of top-level folders (actually cloud-storage providers) associated with this node. This is the starting point\nfor accessing the actual files stored within this node.\n\n###Forked From\n\nIf this node was forked from another node, the canonical endpoint of the node that was forked from will be\navailable in the `/forked_from/links/related/href` key.  Otherwise, it will be null.\n\n###Logs\n\nList of read-only log actions pertaining to the node.\n\n###Node Links\n\nList of links (pointers) to other nodes on the OSF.  Node links can be added through this endpoint.\n\n###Parent\n\nIf this node is a child node of another node, the parent's canonical endpoint will be available in the\n`/parent/links/related/href` key.  Otherwise, it will be null.\n\n###Registrations\n\nList of registrations of the current node.\n\n###Root\n\nReturns the top-level node associated with the current node.  If the current node is the top-level node, the root is\nthe current node.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Details about a given node (project or component). *Writeable*.",
                "operationId": "nodes_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/addons/": {
            "get": {
                "description": "List of addons connected to this node *Read-only*\n\nPaginated list of node addons ordered by their `id` or `addon_short_name`. Attributes other than\n`enabled` will be `null` if the addon is not enabled for this node.\n\n## <Addon\\>NodeSettings Attributes\n\nOSF <Addon\\>NodeSettings entities have the \"node_addons\" `type`, and their `id` indicates the addon\nservice provider (eg. `box`, `googledrive`, etc).\n\nname                    type                description\n======================================================================================================\nexternal_account_id     string              _id of the associated ExternalAccount, if any\nconfigured              boolean             has this node been configured with a folder?\nenabled                 boolean             has a node settings object been associated with this node?\nfolder_id               string              folder id of linked folder, from third-party service\nnode_has_auth           boolean             is this node fully authorized to use an ExternalAccount?\nfolder_path             boolean             folder path of linked folder, from third-party service\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List of addons connected to this node *Read-only*",
                "operationId": "nodes_addons_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/addons/{provider}/": {
            "get": {
                "description": "Detail of individual addon connected to this node *Writeable*.\n\nAttributes other than `enabled` will be null if the addon is not enabled for this node.\n\n##Permissions\n\n<Addon>NodeSettings that are attached to public Nodes will give read-only access to everyone. Private nodes require explicit read\npermission. Write and admin access are the same for public and private nodes. Administrators on a parent node have\nimplicit read permissions for all child nodes.\n\nAny users with write or admin access to the node are able to deauthorize an enabled addon, but only the addon authorizer is able\nto change the configuration (i.e. selected folder) of an already-configured <Addon>NodeSettings entity.\n\n## <Addon>NodeSettings Attributes\n\nOSF <Addon>NodeSettings entities have the \"node_addons\" `type`, and their `id` indicates the addon\nservice provider (eg. `box`, `googledrive`, etc).\n\nname                    type                description\n======================================================================================================\nexternal_account_id     string              _id of the associated ExternalAccount, if any\nconfigured              boolean             has this node been configured with a folder?\nenabled                 boolean             has a node settings object been associated with this node?\nfolder_id               string              folder id of linked folder, from third-party service\nnode_has_auth           boolean             is this node fully authorized to use an ExternalAccount?\nfolder_path             boolean             folder path of linked folder, from third-party service\nurl                     string              Specific to the `forward` addon\nlabel                   string              Specific to the `forward` addon\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "provider",
                        "in": "path"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Detail of individual addon connected to this node *Writeable*.",
                "operationId": "nodes_addons_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/addons/{provider}/folders/": {
            "get": {
                "description": "List of folders that this node can connect to *Read-only*.\n\nPaginated list of folders retrieved from the associated third-party service\n\n##Permissions\n\n<Addon> Folders are visible only to the addon authorizer.\n\n## <Addon> Folder Attributes\n\nOSF <Addon\\> Folder entities have the \"node_addon_folders\" `type`, and their `id` indicates the folder_id\naccording to the associated service provider (eg. `box`, `googledrive`, etc).\n\nname        type        description\n======================================================================================================\npath        string      path of this folder, according to third-party service\nkind        string      `\"folder\"`, typically.\nprovider    string      `short_name` of third-party service provider\nname        string      name of this folder\nfolder_id   string      id of this folder, according to third-party service\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "provider",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List of folders that this node can connect to *Read-only*.",
                "operationId": "nodes_addons_folders_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/children/": {
            "get": {
                "description": "Children of the current node. *Writeable*.\n\nThis will get the next level of child nodes for the selected node if the current user has read access for those\nnodes. Creating a node via this endpoint will behave the same as the [node list endpoint](/v2/nodes/), but the new\nnode will have the selected node set as its parent.\n\n##Node Attributes\n\n<!--- Copied Attributes from NodeDetail -->\n\nOSF Node entities have the \"nodes\" `type`.\n\nname                            type                description\n=================================================================================\ntitle                           string              title of project or component\ndescription                     string              description of the node\ncategory                        string              node category, must be one of the allowed values\ndate_created                    iso8601 timestamp   timestamp that the node was created\ndate_modified                   iso8601 timestamp   timestamp when the node was last updated\ntags                            array of strings    list of tags that describe the node\ncurrent_user_can_comment        boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions        array of strings    list of strings representing the permissions for the current user on this node\nregistration                    boolean             is this a registration? (always false - may be deprecated in future versions)\nfork                            boolean             is this node a fork of another node?\npublic                          boolean             has this node been made publicly-visible?\ncollection                      boolean             is this a collection? (always false - may be deprecated in future versions)\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n###Create Child Node\n\n<!--- Copied Creating New Node from NodeList -->",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Children of the current node. *Writeable*.",
                "operationId": "nodes_children_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/citation/": {
            "get": {
                "description": "The node citation for a node in CSL format *read only*\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future**\n\n##NodeCitationDetail Attributes\n\nname                     type                description\n=================================================================================\nid                       string               unique ID for the citation\ntitle                    string               title of project or component\nauthor                   list                 list of authors for the work\npublisher                string               publisher - most always 'Open Science Framework'\ntype                     string               type of citation - web\ndoi                      string               doi of the resource",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "The node citation for a node in CSL format *read only*",
                "operationId": "nodes_citation_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/citation/{style_id}/": {
            "get": {
                "description": "The node citation for a node in a specific style's format t *read only*\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future**\n\n##NodeCitationDetail Attributes\n\nname                     type                description\n=================================================================================\ncitation                string               complete citation for a node in the given style",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "style_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "The node citation for a node in a specific style's format t *read only*",
                "operationId": "nodes_citation_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/citations/": {
            "get": {
                "description": "List of alternative citations for a project.\n\n##Actions\n\n###Create Alternative Citation",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List of alternative citations for a project.",
                "operationId": "nodes_citations_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/citations/{citation_id}/": {
            "get": {
                "description": "Details about an alternative citations for a project.\n\n##Actions\n\n###Update Alternative Citation",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "citation_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Details about an alternative citations for a project.",
                "operationId": "nodes_citations_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/comments/": {
            "get": {
                "description": "List of comments on a node. *Writeable*.\n\nPaginated list of comments ordered by their `date_created.` Each resource contains the full representation of the\ncomment, meaning additional requests to an individual comment's detail view are not necessary.\n\nNote that if an anonymous view_only key is being used, the user relationship will not be exposed.\n\n###Permissions\n\nComments on public nodes are given read-only access to everyone. If the node comment-level is \"private\",\nonly contributors have permission to comment. If the comment-level is \"public\" any logged-in OSF user can comment.\nComments on private nodes are only visible to contributors and administrators on the parent node.\n\n##Attributes\n\nOSF comment entities have the \"comments\" `type`.\n\nname           type               description\n=================================================================================\ncontent        string             content of the comment\ndate_created   iso8601 timestamp  timestamp that the comment was created\ndate_modified  iso8601 timestamp  timestamp when the comment was last updated\nmodified       boolean            has this comment been edited?\ndeleted        boolean            is this comment deleted?\nis_abuse       boolean            has this comment been reported by the current user?\nhas_children   boolean            does this comment have replies?\ncan_edit       boolean            can the current user edit this comment?\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n###Create",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List of comments on a node. *Writeable*.",
                "operationId": "nodes_comments_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/contributors/": {
            "get": {
                "description": "Contributors (users) for a node.\n\nContributors are users who can make changes to the node or, in the case of private nodes,\nhave read access to the node. Contributors are divided between 'bibliographic' and 'non-bibliographic'\ncontributors. From a permissions standpoint, both are the same, but bibliographic contributors\nare included in citations, while non-bibliographic contributors are not included in citations.\n\nNote that if an anonymous view_only key is being used, the user relationship will not be exposed and the id for\nthe contributor will be an empty string.\n\n##Node Contributor Attributes\n\n<!--- Copied Attributes from NodeContributorDetail -->\n\n`type` is \"contributors\"\n\nname                        type     description\n======================================================================================================\nbibliographic               boolean  Whether the user will be included in citations for this node. Default is true.\npermission                  string   User permission level. Must be \"read\", \"write\", or \"admin\". Default is \"write\".\nunregistered_contributor    string   Contributor's assigned name if contributor hasn't yet claimed account\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Relationships\n\n###Users\n\nThis endpoint shows the contributor user detail and is automatically embedded.\n\n##Actions\n\n###Adding Contributors",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Contributors (users) for a node.",
                "operationId": "nodes_contributors_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/contributors/{user_id}/": {
            "get": {
                "description": "Detail of a contributor for a node. *Writeable*.\n\nContributors are users who can make changes to the node or, in the case of private nodes,\nhave read access to the node. Contributors are divided between 'bibliographic' and 'non-bibliographic'\ncontributors. From a permissions standpoint, both are the same, but bibliographic contributors\nare included in citations, while non-bibliographic contributors are not included in citations.\n\nNote that if an anonymous view_only key is being used, the user relationship will not be exposed and the id for\nthe contributor will be an empty string.\n\nContributors can be viewed, removed, and have their permissions and bibliographic status changed via this\nendpoint.\n\n##Attributes\n\n`type` is \"contributors\"\n\nname                        type     description\n======================================================================================================\nbibliographic               boolean  Whether the user will be included in citations for this node. Default is true.\npermission                  string   User permission level. Must be \"read\", \"write\", or \"admin\". Default is \"write\".\nunregistered_contributor    string   Contributor's assigned name if contributor hasn't yet claimed account\nindex                       integer  The position in the list of contributors reflected in the bibliography. Zero Indexed.\n\n##Relationships\n\n###Users\n\nThis endpoint shows the contributor user detail.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "user_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Detail of a contributor for a node. *Writeable*.",
                "operationId": "nodes_contributors_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/draft_registrations/": {
            "get": {
                "description": "Draft registrations of the current node.\n\n<!--- Copied partially from NodeDraftRegistrationDetail -->\n\nDraft registrations contain the supplemental registration questions that accompany a registration. A registration\nis a frozen version of the project that can never be edited or deleted but can be withdrawn.\nYour original project remains editable but will now have the registration linked to it.\n\n###Permissions\n\nUsers must have admin permission on the node in order to view or create a draft registration.\n\n##Draft Registration Attributes\n\n\nDraft Registrations have the \"draft_registrations\" `type`.\n\nname                       type               description\n===========================================================================\nregistration_supplement    string             id of registration_schema, must be an active schema\nregistration_metadata      dictionary         dictionary of question ids and responses from registration schema\ndatetime_initiated         iso8601 timestamp  timestamp that the draft was created\ndatetime_updated           iso8601 timestamp  timestamp when the draft was last updated\n\n##Relationships\n\n###Branched From\n\nNode that the draft is branched from.  The node endpoint is available in `/branched_from/links/related/href`.\n\n###Initiator\n\nUser who initiated the draft registration.  The user endpoint is available in `/initiator/links/related/href`.\n\n##Registration Schema\n\nDetailed registration schema.  The schema endpoint is available in `/registration_schema/links/related/href`.\n\n##Actions\n\n###Create Draft Registration",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Draft registrations of the current node.",
                "operationId": "nodes_draft_registrations_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/draft_registrations/{draft_id}/": {
            "get": {
                "description": "Details about a given draft registration. *Writeable*.\n\nDraft registrations contain the supplemental registration questions that accompany a registration. A registration\nis a frozen version of the project that can never be edited or deleted but can be withdrawn.  Answer the questions\nin the draft registration with PUT/PATCH requests until you are ready to submit.  Final submission will include sending the\ndraft registration id as part of a POST request to the Node Registrations endpoint.\n\n###Permissions\n\nUsers must have admin permission on the node in order to view, update, or delete a draft registration.\n\n##Attributes\n\nDraft Registrations have the \"draft_registrations\" `type`.\n\nname                       type               description\n===========================================================================\nregistration_supplement    string             id of registration_schema, must be an active schema\nregistration_metadata      dictionary         dictionary of question ids and responses from registration schema\ndatetime_initiated         iso8601 timestamp  timestamp that the draft was created\ndatetime_updated           iso8601 timestamp  timestamp when the draft was last updated\n\n##Relationships\n\n###Branched From\n\nNode that the draft is branched from.  The node endpoint is available in `/branched_from/links/related/href`.\n\n###Initiator\n\nUser who initiated the draft registration.  The user endpoint is available in `/initiator/links/related/href`.\n\n##Registration Schema\n\nDetailed registration schema.  The schema endpoint is available in `/registration_schema/links/related/href`.\n\n##Actions\n\n###Update Draft Registration",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "draft_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Details about a given draft registration. *Writeable*.",
                "operationId": "nodes_draft_registrations_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/files/": {
            "get": {
                "description": "List of storage providers enabled for this node. *Read-only*.\n\nUsers of the OSF may access their data on a [number of cloud-storage](/v2/#storage-providers) services that have\nintegrations with the OSF.  We call these \"providers\".  By default every node has access to the OSF-provided\nstorage but may use as many of the supported providers as desired.  This endpoint lists all of the providers that are\nconfigured for this node.  If you want to add more, you will need to do that in the Open Science Framework front end\nfor now.\n\nIn the OSF filesystem model, providers are treated as folders, but with special properties that distinguish them\nfrom regular folders.  Every provider folder is considered a root folder, and may not be deleted through the regular\nfile API.  To see the contents of the provider, issue a GET request to the `/relationships/files/links/related/href`\nattribute of the provider resource.  The `new_folder` and `upload` actions are handled by another service called\nWaterButler, whose response format differs slightly from the OSF's.\n\n<!--- Copied from FileDetail.Spiel -->\n\n###Waterbutler Entities\n\nWhen an action is performed against a WaterButler endpoint, it will generally respond with a file entity, a folder\nentity, or no content.\n\n####File Entity\n\nname          type       description\n=========================================================================\nname          string     name of the file\npath          string     unique identifier for this file entity for this\nproject and storage provider. may not end with '/'\nmaterialized  string     the full path of the file relative to the storage\nroot.  may not end with '/'\nkind          string     \"file\"\netag          string     etag - http caching identifier w/o wrapping quotes\nmodified      timestamp  last modified timestamp - format depends on provider\ncontentType   string     MIME-type when available\nprovider      string     id of provider e.g. \"osfstorage\", \"s3\", \"googledrive\".\nequivalent to addon_short_name on the OSF\nsize          integer    size of file in bytes\nextra         object     may contain additional data beyond what's described here,\ndepending on the provider\nversion     integer    version number of file. will be 1 on initial upload\ndownloads   integer    count of the number times the file has been downloaded\nhashes      object\nmd5       string     md5 hash of file\nsha256    string     SHA-256 hash of file\n\n####Folder Entity\n\nname          type    description\n======================================================================\nname          string  name of the folder\npath          string  unique identifier for this folder entity for this\nproject and storage provider. must end with '/'\nmaterialized  string  the full path of the folder relative to the storage\nroot.  must end with '/'\nkind          string  \"folder\"\netag          string  etag - http caching identifier w/o wrapping quotes\nextra         object  varies depending on provider\n\n##Provider Attributes\n\n`type` is \"files\"\n\nname      type    description\n=================================================================================\nname      string  name of the provider\nkind      string  type of this file/folder.  always \"folder\"\npath      path    relative path of this folder within the provider filesys. always \"/\"\nnode      string  node this provider belongs to\nprovider  string  provider id, same as \"name\"\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n<!--- Copied from FileDetail.Actions -->\n\n###Create Subfolder (*folders*)",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List of storage providers enabled for this node. *Read-only*.",
                "operationId": "nodes_files_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/files/providers/{provider}/": {
            "get": {
                "tags": [
                    "nodes"
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "provider",
                        "in": "path"
                    }
                ],
                "operationId": "nodes_files_providers_read"
            }
        },
        "/nodes/{node_id}/files/{provider}{path})": {
            "get": {
                "description": "Files attached to a node for a given provider. *Read-only*.\n\nThis gives a list of all of the files and folders that are attached to your project for the given storage provider.\nIf the provider is not \"osfstorage\", the metadata for the files in the storage will be retrieved and cached whenever\nthis endpoint is accessed.  To see the cached metadata, GET the endpoint for the file directly (available through\nits `/links/info` attribute).\n\nWhen a create/update/delete action is performed against the file or folder, the action is handled by an external\nservice called WaterButler.  The WaterButler response format differs slightly from the OSF's.\n\n<!--- Copied from FileDetail.Spiel -->\n\n###Waterbutler Entities\n\nWhen an action is performed against a WaterButler endpoint, it will generally respond with a file entity, a folder\nentity, or no content.\n\n####File Entity\n\nname                        type              description\n==========================================================================================================\nname                        string            name of the file\npath                        string            unique identifier for this file entity for this\nproject and storage provider. may not end with '/'\nmaterialized                string            the full path of the file relative to the storage\nroot.  may not end with '/'\nkind                        string            \"file\"\netag                        string            etag - http caching identifier w/o wrapping quotes\nmodified                    timestamp         last modified timestamp - format depends on provider\ncontentType                 string            MIME-type when available\nprovider                    string            id of provider e.g. \"osfstorage\", \"s3\", \"googledrive\".\nequivalent to addon_short_name on the OSF\nsize                        integer           size of file in bytes\ncurrent_version             integer           current file version\n\ncurrent_user_can_comment    boolean           Whether the current user is allowed to post comments\n\ntags                        array of strings  list of tags that describes the file (osfstorage only)\nextra                       object            may contain additional data beyond what's described here,\ndepending on the provider\nversion                     integer           version number of file. will be 1 on initial upload\nhashes                      object\nmd5                         string            md5 hash of file\nsha256                      string            SHA-256 hash of file\n\n####Folder Entity\n\nname          type    description\n======================================================================\nname          string  name of the folder\npath          string  unique identifier for this folder entity for this\nproject and storage provider. must end with '/'\nmaterialized  string  the full path of the folder relative to the storage\nroot.  must end with '/'\nkind          string  \"folder\"\netag          string  etag - http caching identifier w/o wrapping quotes\nextra         object  varies depending on provider\n\n##File Attributes\n\n<!--- Copied Attributes from FileDetail -->\n\nFor an OSF File entity, the `type` is \"files\" regardless of whether the entity is actually a file or folder.  They\ncan be distinguished by the `kind` attribute.  Files and folders use the same representation, but some attributes may\nbe null for one kind but not the other. `size` will be null for folders.  A list of storage provider keys can be\nfound [here](/v2/#storage-providers).\n\nname          type               description\n===================================================================================================\nguid              string             OSF GUID for this file (if one has been assigned)\nname              string             name of the file or folder; used for display\nkind              string             \"file\" or \"folder\"\npath              string             same as for corresponding WaterButler entity\nmaterialized_path string             the unix-style path to the file relative to the provider root\nsize              integer            size of file in bytes, null for folders\nprovider          string             storage provider for this file. \"osfstorage\" if stored on the\nOSF.  other examples include \"s3\" for Amazon S3, \"googledrive\"\nfor Google Drive, \"box\" for Box.com.\nlast_touched      iso8601 timestamp  last time the metadata for the file was retrieved. only\napplies to non-OSF storage providers.\ndate_modified     iso8601 timestamp  timestamp of when this file was last updated*\ndate_created      iso8601 timestamp  timestamp of when this file was created*\nextra             object             may contain additional data beyond what's described here,\ndepending on the provider\nhashes          object\nmd5           string             md5 hash of file, null for folders\nsha256        string             SHA-256 hash of file, null for folders\ndownloads       integer            number of times the file has been downloaded (for osfstorage files)\n\n* A note on timestamps: for files stored in osfstorage, `date_created` refers to the time the file was\nfirst uploaded to osfstorage, and `date_modified` is the time the file was last updated while in osfstorage.\nOther providers may or may not provide this information, but if they do it will correspond to the provider's\nsemantics for created/modified times.  These timestamps may also be stale; metadata retrieved via the File Detail\nendpoint is cached.  The `last_touched` field describes the last time the metadata was retrieved from the external\nprovider.  To force a metadata update, access the parent folder via its Node Files List endpoint.\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n<!--- Copied from FileDetail.Actions -->\n\nThe `links` property of the response provides endpoints for common file operations. The currently-supported actions",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "path",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "provider",
                        "in": "path"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Files attached to a node for a given provider. *Read-only*.",
                "operationId": "nodes_files_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/forks/": {
            "get": {
                "description": "Forks of the current node. *Writeable*.\n\nPaginated list of the current node's forks ordered by their `forked_date`. Forks are copies of projects that you can\nchange without affecting the original project.  When creating a fork, your fork will will only contain public components or those\nfor which you are a contributor.  Private components that you do not have access to will not be forked.\n\n##Node Fork Attributes\n\n<!--- Copied Attributes from NodeDetail with exception of forked_date-->\n\nOSF Node Fork entities have the \"nodes\" `type`.\n\nname                        type               description\n===============================================================================================================================\ntitle                       string             title of project or component\ndescription                 string             description of the node\ncategory                    string             node category, must be one of the allowed values\ndate_created                iso8601 timestamp  timestamp that the node was created\ndate_modified               iso8601 timestamp  timestamp when the node was last updated\ntags                        array of strings   list of tags that describe the node\nregistration                boolean            has this project been registered? (always False)\ncollection                  boolean            is this node a collection (always False)\nfork                        boolean            is this node a fork of another node? (always True)\npublic                      boolean            has this node been made publicly-visible?\nforked_date                 iso8601 timestamp  timestamp when the node was forked\ncurrent_user_can_comment    boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions    array of strings   List of strings representing the permissions for the current user on this node\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n###Create Node Fork",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Forks of the current node. *Writeable*.",
                "operationId": "nodes_forks_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/identifiers/": {
            "get": {
                "description": "List of identifiers for a specified node. *Read-only*.\n\n##Identifier Attributes\n\nOSF Identifier entities have the \"identifiers\" `type`.\n\nname           type                   description\n----------------------------------------------------------------------------\ncategory       string                 e.g. 'ark', 'doi'\nvalue          string                 the identifier value itself\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List of identifiers for a specified node. *Read-only*.",
                "operationId": "nodes_identifiers_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/institutions/": {
            "get": {
                "description": "Detail of the affiliated institutions a node has, if any. Returns [] if the node has no\naffiliated institution.\n\n##Attributes\n\nOSF Institutions have the \"institutions\" `type`.\n\nname           type               description\n=========================================================================\nname           string             title of the institution\nid             string             unique identifier in the OSF\nlogo_path      string             a path to the institution's static logo\n\n\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Detail of the affiliated institutions a node has, if any. Returns [] if the node has no",
                "operationId": "nodes_institutions_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/linked_nodes/": {
            "get": {
                "description": "List of nodes linked to this node. *Read-only*.\n\nLinked nodes are the nodes pointed to by node links. This view will probably replace node_links in the near future.\n\n<!--- Copied Spiel from NodeDetail -->\n\nOn the front end, nodes are considered 'projects' or 'components'. The difference between a project and a component\nis that a project is the top-level node, and components are children of the project. There is also a [category\nfield](/v2/#osf-node-categories) that includes 'project' as an option. The categorization essentially determines\nwhich icon is displayed by the node in the front-end UI and helps with search organization. Top-level nodes may have\na category other than project, and children nodes may have a category of project.\n\n##Linked Node Attributes\n\n<!--- Copied Attributes from NodeDetail -->\n\nOSF Node entities have the \"nodes\" `type`.\n\nname           type               description\n=================================================================================\ntitle          string             title of project or component\ndescription    string             description of the node\ncategory       string             node category, must be one of the allowed values\ndate_created   iso8601 timestamp  timestamp that the node was created\ndate_modified  iso8601 timestamp  timestamp when the node was last updated\ntags           array of strings   list of tags that describe the node\nregistration   boolean            is this is a registration?\ncollection     boolean            is this node a collection of other nodes?\npublic         boolean            has this node been made publicly-visible?\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Query Params\n\n+ `page=<Int>` -- page number of results to view, default 1\n\n+ `filter[<fieldname>]=<Str>` -- fields and values to filter the search results on.\n\nNodes may be filtered by their `title`, `category`, `description`, `public`, `registration`, or `tags`.  `title`,\n`description`, and `category` are string fields and will be filtered using simple substring matching.  `public` and\n`registration` are booleans, and can be filtered using truthy values, such as `true`, `false`, `0`, or `1`.  Note\nthat quoting `true` or `false` in the query will cause the match to fail regardless.  `tags` is an array of simple strings.\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List of nodes linked to this node. *Read-only*.",
                "operationId": "nodes_linked_nodes_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/logs/": {
            "get": {
                "description": "List of Logs associated with a given Node. *Read-only*.\n\n<!--- Copied Description from NodeLogDetail -->\n\nPaginated list of Logs ordered by their `date`. This includes the Logs of the specified Node as well as the logs of that Node's children that the current user has access to.\n\nNote that if an anonymous view_only key is being used, the user relationship will not be exposed.\n\nOn the front end, logs show record and show actions done on the OSF. The complete list of loggable actions (in the format {identifier}: {description}) is as follows:\n\n* 'project_created': A Node is created\n* 'project_registered': A Node is registered\n* 'project_deleted': A Node is deleted\n* 'created_from': A Node is created using an existing Node as a template\n* 'pointer_created': A Pointer is created\n* 'pointer_forked': A Pointer is forked\n* 'pointer_removed': A Pointer is removed\n* 'node_removed': A component is deleted\n* 'node_forked': A Node is forked\n===\n* 'made_public': A Node is made public\n* 'made_private': A Node is made private\n* 'tag_added': A tag is added to a Node\n* 'tag_removed': A tag is removed from a Node\n* 'edit_title': A Node's title is changed\n* 'edit_description': A Node's description is changed\n* 'updated_fields': One or more of a Node's fields are changed\n* 'external_ids_added': An external identifier is added to a Node (e.g. DOI, ARK)\n===\n* 'contributor_added': A Contributor is added to a Node\n* 'contributor_removed': A Contributor is removed from a Node\n* 'contributors_reordered': A Contributor's position in a Node's bibliography is changed\n* 'permissions_updated': A Contributor's permissions on a Node are changed\n* 'made_contributor_visible': A Contributor is made bibliographically visible on a Node\n* 'made_contributor_invisible': A Contributor is made bibliographically invisible on a Node\n===\n* 'wiki_updated': A Node's wiki is updated\n* 'wiki_deleted': A Node's wiki is deleted\n* 'wiki_renamed': A Node's wiki is renamed\n* 'made_wiki_public': A Node's wiki is made public\n* 'made_wiki_private': A Node's wiki is made private\n===\n* 'addon_added': An add-on is linked to a Node\n* 'addon_removed': An add-on is unlinked from a Node\n* 'addon_file_moved': A File in a Node's linked add-on is moved\n* 'addon_file_copied': A File in a Node's linked add-on is copied\n* 'addon_file_renamed': A File in a Node's linked add-on is renamed\n* 'node_authorized': An addon is authorized for a project\n* 'node_deauthorized': An addon is deauthorized for a project\n* 'folder_created': A Folder is created in a Node's linked add-on\n* 'file_added': A File is added to a Node's linked add-on\n* 'file_updated': A File is updated on a Node's linked add-on\n* 'file_removed': A File is removed from a Node's linked add-on\n* 'file_restored': A File is restored in a Node's linked add-on\n===\n* 'comment_added': A Comment is added to some item\n* 'comment_removed': A Comment is removed from some item\n* 'comment_updated': A Comment is updated on some item\n===\n* 'embargo_initiated': An embargoed Registration is proposed on a Node\n* 'embargo_approved': A proposed Embargo of a Node is approved\n* 'embargo_cancelled': A proposed Embargo of a Node is cancelled\n* 'embargo_completed': A proposed Embargo of a Node is completed\n* 'retraction_initiated': A Withdrawal of a Registration is proposed\n* 'retraction_approved': A Withdrawal of a Registration is approved\n* 'retraction_cancelled': A Withdrawal of a Registration is cancelled\n* 'registration_initiated': A Registration of a Node is proposed\n* 'registration_approved': A proposed Registration is approved\n* 'registration_cancelled': A proposed Registration is cancelled\n===\n* 'node_created': A Node is created (_deprecated_)\n##Log Attributes\n\n<!--- Copied Attributes from LogList -->\n\nOSF Log entities have the \"logs\" `type`.\n\nname           type                   description\n============================================================================\ndate           iso8601 timestamp      timestamp of Log creation\naction         string                 Log action (see list above)\n\n##Relationships\n\n###Node\n\nThe node this log belongs to.\n\n###User\n\nThe user who performed the logged action.\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n##Query Params\n\n<!--- Copied Query Params from LogList -->\n\nLogs may be filtered by their `action` and `date`.\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List of Logs associated with a given Node. *Read-only*.",
                "operationId": "nodes_logs_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/node_links/": {
            "get": {
                "description": "Node Links to other nodes. *Writeable*.\n\nNode Links act as pointers to other nodes. Unlike Forks, they are not copies of nodes;\nNode Links are a direct reference to the node that they point to.\n\n##Node Link Attributes\n`type` is \"node_links\"\n\nNone\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Relationships\n\n### Target Node\n\nThis endpoint shows the target node detail and is automatically embedded.\n\n##Actions\n\n###Adding Node Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Node Links to other nodes. *Writeable*.",
                "operationId": "nodes_node_links_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/node_links/{node_link_id}/": {
            "get": {
                "description": "Node Link details. *Writeable*.\n\nNode Links act as pointers to other nodes. Unlike Forks, they are not copies of nodes;\nNode Links are a direct reference to the node that they point to.\n\n##Attributes\n`type` is \"node_links\"\n\nNone\n\n##Links\n\n*None*\n\n##Relationships\n\n###Target node\n\nThis endpoint shows the target node detail and is automatically embedded.\n\n##Actions\n\n###Remove Node Link",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_link_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Node Link details. *Writeable*.",
                "operationId": "nodes_node_links_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/registrations/": {
            "get": {
                "description": "Registrations of the current node.\n\nRegistrations are read-only snapshots of a project that can never be edited or deleted but can be withdrawn. This view\nis a list of all the registrations and withdrawn registrations of the current node. To create a registration, first\ncreate a draft registration and answer the required supplemental registration questions. Then, submit a POST request\nto this endpoint with the draft registration id in the body of the request.\n\n<!--- Copied from RegistrationList -->\n\nA withdrawn registration will display a limited subset of information, namely, title, description,\ndate_created, registration, withdrawn, date_registered, withdrawal_justification, and registration supplement. All\nother fields will be displayed as null. Additionally, the only relationships permitted to be accessed for a withdrawn\nregistration are the contributors - other relationships will return a 403. Each resource contains the full representation\nof the registration, meaning additional requests to an individual registrations's detail view are not necessary.\n\n\n<!--- Copied Attributes from RegistrationList -->\n\n##Registration Attributes\n\nRegistrations have the \"registrations\" `type`.\n\nname                            type               description\n=======================================================================================================\ntitle                           string             title of the registered project or component\ndescription                     string             description of the registered node\ncategory                        string             bode category, must be one of the allowed values\ndate_created                    iso8601 timestamp  timestamp that the node was created\ndate_modified                   iso8601 timestamp  timestamp when the node was last updated\ntags                            array of strings   list of tags that describe the registered node\ncurrent_user_can_comment        boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions        array of strings   list of strings representing the permissions for the current user on this node\nfork                            boolean            is this project a fork?\nregistration                    boolean            is this node a registration? (always true - may be deprecated in future versions)\ncollection                      boolean            is this registered node a collection? (always false - may be deprecated in future versions)\npublic                          boolean            has this registration been made publicly-visible?\nwithdrawn                       boolean            has this registration been withdrawn?\ndate_registered                 iso8601 timestamp  timestamp that the registration was created\nembargo_end_date                iso8601 timestamp  when the embargo on this registration will be lifted (if applicable)\nwithdrawal_justification        string             reasons for withdrawing the registration\npending_withdrawal              boolean            is this registration pending withdrawal?\npending_withdrawal_approval     boolean            is this registration pending approval?\npending_embargo_approval        boolean            is the associated Embargo awaiting approval by project admins?\nregistered_meta                 dictionary         registration supplementary information\nregistration_supplement         string             registration template\n\n##Actions\n\n###Create Registration",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Registrations of the current node.",
                "operationId": "nodes_registrations_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/relationships/institutions/": {
            "get": {
                "description": "Relationship Endpoint for Node -> Institutions Relationship\n\nUsed to set, remove, update and retrieve the affiliated_institutions of a node to an institution\n\n##Actions\n\n###Create",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Relationship Endpoint for Node -> Institutions Relationship",
                "operationId": "nodes_relationships_institutions_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/relationships/linked_nodes/": {
            "get": {
                "description": "Relationship Endpoint for Nodes -> Linked Node relationships\n\nUsed to set, remove, update and retrieve the ids of the linked nodes attached to this collection. For each id, there\nexists a node link that contains that node.\n\n##Actions\n\n###Create",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Relationship Endpoint for Nodes -> Linked Node relationships",
                "operationId": "nodes_relationships_linked_nodes_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/view_only_links/": {
            "get": {
                "description": "List of view only links on a node. *Writeable*.\n\n###Permissions\n\nView only links on a node, public or private, are readable and writeable only by users that are\nadministrators on the node.\n\n##Attributes\n\nname            type                    description\n=================================================================================\nname            string                  name of the view only link\nanonymous       boolean                 whether the view only link has anonymized contributors\ndate_created    iso8601 timestamp       timestamp when the view only link was created\nkey             string                  the view only link key\n\n\n##Relationships\n\n###Creator\n\nThe user who created the view only link.\n\n###Nodes\n\nThe nodes which this view only link key gives read-only access to.\n\n##Actions\n\n###Create",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List of view only links on a node. *Writeable*.",
                "operationId": "nodes_view_only_links_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/view_only_links/{link_id}/": {
            "get": {
                "description": "Detail of a specific view only link on a node. *Writeable*.\n\n###Permissions\n\nView only links on a node, public or private, are only readable and writeable by users that are\nadministrators on the node.\n\n##Attributes\n\nname            type                    description\n=================================================================================\nname            string                  name of the view only link\nanonymous       boolean                 whether the view only link has anonymized contributors\ndate_created    iso8601 timestamp       timestamp when the view only link was created\nkey             string                  the view only key\n\n\n##Relationships\n\n###Creator\n\nThe user who created the view only link.\n\n###Nodes\n\nThe nodes which this view only link key gives read-only access to.\n\n##Actions\n\n###Update",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "link_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Detail of a specific view only link on a node. *Writeable*.",
                "operationId": "nodes_view_only_links_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/nodes/{node_id}/wikis/": {
            "get": {
                "description": "List of wiki pages on a node. *Read only*.\n\nPaginated list of the node's current wiki page versions ordered by their `date_modified.` Each resource contains the\nfull representation of the wiki, meaning additional requests to an individual wiki's detail view are not necessary.\n\nNote that if an anonymous view_only key is being used, the user relationship will not be exposed.\n\n###Permissions\n\nWiki pages on public nodes are given read-only access to everyone. Wiki pages on private nodes are only visible to\ncontributors and administrators on the parent node.\n\n##Attributes\n\nOSF wiki entities have the \"wikis\" `type`.\n\nname                    type               description\n======================================================================================================\nname                        string             name of the wiki pag\npath                        string             the path of the wiki page\nmaterialized_path           string             the path of the wiki page\ndate_modified               iso8601 timestamp  timestamp when the wiki was last updated\ncontent_type                string             MIME-type\ncurrent_user_can_comment    boolean            Whether the current user is allowed to post comments\nextra                       object\nversion                     integer            version number of the wiki\n\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Query Params\n\n+ `filter[name]=<Str>` -- filter wiki pages by name\n\n+ `filter[date_modified][comparison_operator]=YYYY-MM-DDTH:M:S` -- filter wiki pages based on date modified.\n\nWiki pages can be filtered based on their `date_modified` fields. Possible comparison\noperators include 'gt' (greater than), 'gte'(greater than or equal to), 'lt' (less than) and 'lte'\n(less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.\n\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List of wiki pages on a node. *Read only*.",
                "operationId": "nodes_wikis_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/preprint_providers/": {
            "get": {
                "description": "Paginated list of verified PreprintProviders available\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future.**\n\n##PreprintProvider Attributes\n\nOSF Preprint Providers have the \"preprint_providers\" `type`.\n\nname           type               description\n=========================================================================\nname           string             name of the preprint provider\nlogo_path      string             a path to the preprint provider's static logo\nbanner_path    string             a path to the preprint provider's banner\ndescription    string             description of the preprint provider\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "preprint_providers"
                ],
                "summary": "Paginated list of verified PreprintProviders available",
                "operationId": "preprint_providers_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/preprint_providers/{provider_id}/": {
            "get": {
                "description": "Details about a given preprint provider.\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future.**\n\n##Attributes\n\nOSF Preprint Providers have the \"preprint_providers\" `type`.\n\nname           type               description\n=========================================================================\nname           string             name of the preprint provider\nlogo_path      string             a path to the preprint provider's static logo\nbanner_path    string             a path to the preprint provider's banner\ndescription    string             description of the preprint provider\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "provider_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "preprint_providers"
                ],
                "summary": "Details about a given preprint provider.",
                "operationId": "preprint_providers_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/preprint_providers/{provider_id}/preprints/": {
            "get": {
                "description": "Preprints from a given preprint_provider. *Read Only*\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future.**\n\nTo update preprints with a given preprint_provider, see the `<node_id>/relationships/preprint_provider` endpoint\n\n##Preprint Attributes\n\nMany of these preprint attributes are the same as node, with a few special fields added in.\n\nOSF Preprint entities have the \"preprint\" `type`.\n\nname                            type                  description\n====================================================================================\ntitle                           string                title of preprint, same as its project or component\nabstract                        string                description of the preprint\ndate_created                    iso8601 timestamp     timestamp that the preprint was created\ndate_modified                   iso8601 timestamp     timestamp when the preprint was last updated\ntags                            array of strings      list of tags that describe the node\nsubjects                        array of dictionaries list ids of Subject in the PLOS taxonomy. Dictrionary, containing the subject text and subject ID\ndoi                             string                bare DOI for the manuscript, as entered by the user\n\n##Relationships\n\n###Primary File\nThe file that is designated as the preprint's primary file, or the manuscript of the preprint.\n\n###Files\nLink to list of files associated with this node/preprint\n\n###Contributors\nLink to list of contributors that are affiliated with this preprint.\n\n###Provider\nLink to preprint_provider detail for this preprint\n\n##Links\n\n- `self` -- Preprint detail page for the current preprint\n- `html` -- Project on the OSF corresponding to the current preprint\n- `doi` -- URL representation of the DOI entered by the user for the preprint manuscript\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "provider_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "preprint_providers"
                ],
                "summary": "Preprints from a given preprint_provider. *Read Only*",
                "operationId": "preprint_providers_preprints_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/preprints/": {
            "get": {
                "summary": "List of Preprints",
                "description": "\nPreprints that represent a special kind of preprint node. *Writeable*.\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future.**\n\nPaginated list of preprints ordered by their `date_created`.  Each resource contains a representation of the\npreprint.\n\n##Preprint Attributes\n\nMany of these preprint attributes are the same as node, with a few special fields added in.\n\nOSF Preprint entities have the \"preprint\" `type`.\n\nname                            type                  description\n====================================================================================\ntitle                           string                title of preprint, same as its project or component\nabstract                        string                description of the preprint\ndate_created                    iso8601 timestamp     timestamp that the preprint was created\ndate_modified                   iso8601 timestamp     timestamp when the preprint was last updated\ntags                            array of strings      list of tags that describe the node\nsubjects                        array of dictionaries list ids of Subject in the PLOS taxonomy. Dictrionary, containing the subject text and subject ID\ndoi                             string                bare DOI for the manuscript, as entered by the user\n\n##Relationships\n\n###Primary File\nThe file that is designated as the preprint's primary file, or the manuscript of the preprint.\n\n###Files\nLink to list of files associated with this node/preprint\n\n###Contributors\nLink to list of contributors that are affiliated with this preprint.\n\n###Provider\nLink to preprint_provider detail for this preprint\n\n##Links\n\n- `self` -- Preprint detail page for the current preprint\n- `html` -- Project on the OSF corresponding to the current preprint\n- `doi` -- URL representation of the DOI entered by the user for the preprint manuscript\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Query Params\n\n+ `page=<Int>` -- page number of results to view, default 1\n\n+ `filter[<fieldname>]=<Str>` -- fields and values to filter the search results on.\n\nPreprints may be filtered by their `id`, `title`, `public`, `tags`, `date_created`, `date_modified`, and `subjects`\nMost are string fields and will be filtered using simple substring matching.\n\n###Creating New Preprints\n\nCreate a new preprint by posting to the guid of the existing **node**, including the file_id for the\nfile you'd like to make the primary preprint file. Note that the **node id** will not be accessible via the\npreprints detail view until after the preprint has been created.",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "preprints"
                ],
                "operationId": "preprints_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "post": {
                "summary": "Add a Preprint",
                "description": "Add a Preprint",
                "tags": [
                    "preprints"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Preprint object to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Preprint"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Preprint successfully created"
                    }
                }
            }
        },
        "/preprints/{node_id}/": {
            "get": {
                "summary": "Retrieve Preprint Details",
                "description": "Preprint Detail  *Writeable*.\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future.**\n\n##Preprint Attributes\n\nMany of these preprint attributes are the same as node, with a few special fields added in.\n\nOSF Preprint entities have the \"preprint\" `type`.\n\nname                            type                  description\n====================================================================================\ntitle                           string                title of preprint, same as its project or component\nabstract                        string                description of the preprint\ndate_created                    iso8601 timestamp     timestamp that the preprint was created\ndate_modified                   iso8601 timestamp     timestamp when the preprint was last updated\ntags                            array of strings      list of tags that describe the node\nsubjects                        array of dictionaries list ids of Subject in the PLOS taxonomy. Dictrionary, containing the subject text and subject ID\nprovider                        string                original source of the preprint\ndoi                             string                bare DOI for the manuscript, as entered by the user\n\n###Updating Preprints\n\nUpdate a preprint by sending a patch request to the guid of the existing preprint node that you'd like to update.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "preprints"
                ],
                "operationId": "preprints_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/preprints/{node_id}/preprint_providers/": {
            "get": {
                "description": "Detail of the preprint providers a preprint has, if any. Returns [] if the preprint has no\npreprnt providers.\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future**\n\n##Attributes\n\nOSF Preprint Providers have the \"preprint_providers\" `type`.\n\nname           type               description\n=========================================================================\nname           string             name of the preprint provider\nlogo_path      string             a path to the preprint provider's static logo\nbanner_path    string             a path to the preprint provider's banner\ndescription    string             description of the preprint provider\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "preprints"
                ],
                "summary": "Detail of the preprint providers a preprint has, if any. Returns [] if the preprint has no",
                "operationId": "preprints_preprint_providers_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/preprints/{node_id}/relationships/preprint_providers/": {
            "get": {
                "description": "Relationship Endpoint for Preprint -> PreprintProvider\n\nUsed to set preprint_provider of a preprint to a PreprintProvider\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future.**\n\n##Actions\n\n###Get",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "preprints"
                ],
                "summary": "Relationship Endpoint for Preprint -> PreprintProvider",
                "operationId": "preprints_relationships_preprint_providers_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/": {
            "get": {
                "description": "Node Registrations.\n\nRegistrations are read-only snapshots of a project. This view is a list of all current registrations for which a user\nhas access.  A withdrawn registration will display a limited subset of information, namely, title, description,\ndate_created, registration, withdrawn, date_registered, withdrawal_justification, and registration supplement. All\nother fields will be displayed as null. Additionally, the only relationships permitted to be accessed for a withdrawn\nregistration are the contributors - other relationships will return a 403.\n\nEach resource contains the full representation of the registration, meaning additional requests to an individual\nregistrations's detail view are not necessary.  Unregistered nodes cannot be accessed through this endpoint.\n\n##Registration Attributes\n\nRegistrations have the \"registrations\" `type`.\n\nname                            type               description\n=======================================================================================================\ntitle                           string             title of the registered project or component\ndescription                     string             description of the registered node\ncategory                        string             bode category, must be one of the allowed values\ndate_created                    iso8601 timestamp  timestamp that the node was created\ndate_modified                   iso8601 timestamp  timestamp when the node was last updated\ntags                            array of strings   list of tags that describe the registered node\ncurrent_user_can_comment        boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions        array of strings   list of strings representing the permissions for the current user on this node\nfork                            boolean            is this project a fork?\nregistration                    boolean            has this project been registered? (always true - may be deprecated in future versions)\ncollection                      boolean            is this registered node a collection? (always false - may be deprecated in future versions)\nnode_license                    object             details of the license applied to the node\nyear                            string             date range of the license\ncopyright_holders               array of strings   holders of the applied license\npublic                          boolean            has this registration been made publicly-visible?\nwithdrawn                       boolean            has this registration been withdrawn?\ndate_registered                 iso8601 timestamp  timestamp that the registration was created\nembargo_end_date                iso8601 timestamp  when the embargo on this registration will be lifted (if applicable)\nwithdrawal_justification        string             reasons for withdrawing the registration\npending_withdrawal              boolean            is this registration pending withdrawal?\npending_withdrawal_approval     boolean            is this registration pending approval?\npending_embargo_approval        boolean            is the associated Embargo awaiting approval by project admins?\nregistered_meta                 dictionary         registration supplementary information\nregistration_supplement         string             registration template\n\n##Relationships\n\n###Registered from\n\nThe registration is branched from this node.\n\n###Registered by\n\nThe registration was initiated by this user.\n\n###Other Relationships\n\nSee documentation on registered_from detail view.  A registration has many of the same properties as a node.\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "Node Registrations.",
                "operationId": "registrations_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/": {
            "get": {
                "description": "Node Registrations.\n\nRegistrations are read-only snapshots of a project. This view shows details about the given registration.\n\nEach resource contains the full representation of the registration, meaning additional requests to an individual\nregistration's detail view are not necessary. A withdrawn registration will display a limited subset of information,\nnamely, title, description, date_created, registration, withdrawn, date_registered, withdrawal_justification, and\nregistration supplement. All other fields will be displayed as null. Additionally, the only relationships permitted\nto be accessed for a withdrawn registration are the contributors - other relationships will return a 403.\n\n##Registration Attributes\n\nRegistrations have the \"registrations\" `type`.\n\nname                            type               description\n=======================================================================================================\ntitle                           string             title of the registered project or component\ndescription                     string             description of the registered node\ncategory                        string             bode category, must be one of the allowed values\ndate_created                    iso8601 timestamp  timestamp that the node was created\ndate_modified                   iso8601 timestamp  timestamp when the node was last updated\ntags                            array of strings   list of tags that describe the registered node\ncurrent_user_can_comment        boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions        array of strings   list of strings representing the permissions for the current user on this node\nfork                            boolean            is this project a fork?\nregistration                    boolean            has this project been registered? (always true - may be deprecated in future versions)\ncollection                      boolean            is this registered node a collection? (always false - may be deprecated in future versions)\nnode_license                    object             details of the license applied to the node\nyear                            string             date range of the license\ncopyright_holders               array of strings   holders of the applied license\npublic                          boolean            has this registration been made publicly-visible?\nwithdrawn                       boolean            has this registration been withdrawn?\ndate_registered                 iso8601 timestamp  timestamp that the registration was created\nembargo_end_date                iso8601 timestamp  when the embargo on this registration will be lifted (if applicable)\nwithdrawal_justification        string             reasons for withdrawing the registration\npending_withdrawal              boolean            is this registration pending withdrawal?\npending_withdrawal_approval     boolean            is this registration pending approval?\npending_embargo_approval        boolean            is the associated Embargo awaiting approval by project admins?\nregistered_meta                 dictionary         registration supplementary information\nregistration_supplement         string             registration template\n\n##Actions\n\n###Update",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "Node Registrations.",
                "operationId": "registrations_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/children/": {
            "get": {
                "description": "Children of the current registration.\n\nThis will get the next level of child nodes for the selected node if the current user has read access for those\nnodes. Creating a node via this endpoint will behave the same as the [node list endpoint](/v2/nodes/), but the new\nnode will have the selected node set as its parent.\n\n##Node Attributes\n\n<!--- Copied Attributes from NodeDetail -->\n\nOSF Node entities have the \"nodes\" `type`.\n\nname                            type                description\n=================================================================================\ntitle                           string              title of project or component\ndescription                     string              description of the node\ncategory                        string              node category, must be one of the allowed values\ndate_created                    iso8601 timestamp   timestamp that the node was created\ndate_modified                   iso8601 timestamp   timestamp when the node was last updated\ntags                            array of strings    list of tags that describe the node\ncurrent_user_can_comment        boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions        array of strings    list of strings representing the permissions for the current user on this node\nregistration                    boolean             is this a registration? (always false - may be deprecated in future versions)\nfork                            boolean             is this node a fork of another node?\npublic                          boolean             has this node been made publicly-visible?\ncollection                      boolean             is this a collection? (always false - may be deprecated in future versions)\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Query Params\n\n+ `page=<Int>` -- page number of results to view, default 1\n\n+ `filter[<fieldname>]=<Str>` -- fields and values to filter the search results on.\n\n<!--- Copied Query Params from NodeList -->\n\nNodes may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`,\n`root`, `parent`, and `contributors`.  Most are string fields and will be filtered using simple substring matching.  `public`\nis a boolean, and can be filtered using truthy values, such as `true`, `false`, `0`, or `1`.  Note that quoting `true`\nor `false` in the query will cause the match to fail regardless.  `tags` is an array of simple strings.\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "Children of the current registration.",
                "operationId": "registrations_children_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/citation/": {
            "get": {
                "description": "The registration citation for a registration in CSL format *read only*\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future**\n\n##RegistraitonCitationDetail Attributes\n\nname                     type                description\n=================================================================================\nid                       string               unique ID for the citation\ntitle                    string               title of project or component\nauthor                   list                 list of authors for the work\npublisher                string               publisher - most always 'Open Science Framework'\ntype                     string               type of citation - web\ndoi                      string               doi of the resource",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "The registration citation for a registration in CSL format *read only*",
                "operationId": "registrations_citation_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/citation/{style_id}/": {
            "get": {
                "description": "The registration citation for a registration in a specific style's format t *read only*\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future**\n\n##RegistrationCitationStyleDetail Attributes\n\nname                     type                description\n=================================================================================\ncitation                string               complete citation for a registration in the given style",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "style_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "The registration citation for a registration in a specific style's format t *read only*",
                "operationId": "registrations_citation_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/citations/": {
            "get": {
                "description": "List of Alternative Citations for a registration.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "List of Alternative Citations for a registration.",
                "operationId": "registrations_citations_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/citations/{citation_id}/": {
            "get": {
                "description": "Detail of a citations for a registration.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "citation_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "Detail of a citations for a registration.",
                "operationId": "registrations_citations_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/comments/": {
            "get": {
                "description": "List of comments for a registration.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "List of comments for a registration.",
                "operationId": "registrations_comments_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/contributors/": {
            "get": {
                "description": "Contributors (users) for a registration.\n\nContributors are users who can make changes to the node or, in the case of private nodes,\nhave read access to the node. Contributors are divided between 'bibliographic' and 'non-bibliographic'\ncontributors. From a permissions standpoint, both are the same, but bibliographic contributors\nare included in citations, while non-bibliographic contributors are not included in citations.\n\nNote that if an anonymous view_only key is being used, the user relationship will not be exposed and the id for\nthe contributor will be an empty string.\n\n##Node Contributor Attributes\n\n<!--- Copied Attributes from NodeContributorDetail -->\n\n`type` is \"contributors\"\n\nname                        type     description\n======================================================================================================\nbibliographic               boolean  Whether the user will be included in citations for this node. Default is true.\npermission                  string   User permission level. Must be \"read\", \"write\", or \"admin\". Default is \"write\".\nunregistered_contributor    string   Contributor's assigned name if contributor hasn't yet claimed account\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Relationships\n\n###Users\n\nThis endpoint shows the contributor user detail and is automatically embedded.\n\n##Actions\n\n###Adding Contributors",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "Contributors (users) for a registration.",
                "operationId": "registrations_contributors_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/contributors/{user_id}/": {
            "get": {
                "description": "Detail of a contributor for a registration.\n\nContributors are users who can make changes to the node or, in the case of private nodes,\nhave read access to the node. Contributors are divided between 'bibliographic' and 'non-bibliographic'\ncontributors. From a permissions standpoint, both are the same, but bibliographic contributors\nare included in citations, while non-bibliographic contributors are not included in citations.\n\nNote that if an anonymous view_only key is being used, the user relationship will not be exposed and the id for\nthe contributor will be an empty string.\n\nContributors can be viewed, removed, and have their permissions and bibliographic status changed via this\nendpoint.\n\n##Attributes\n\n`type` is \"contributors\"\n\nname                        type     description\n======================================================================================================\nbibliographic               boolean  Whether the user will be included in citations for this node. Default is true.\npermission                  string   User permission level. Must be \"read\", \"write\", or \"admin\". Default is \"write\".\nunregistered_contributor    string   Contributor's assigned name if contributor hasn't yet claimed account\n\n###Users\n\nThis endpoint shows the contributor user detail.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "user_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "Detail of a contributor for a registration.",
                "operationId": "registrations_contributors_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/files/": {
            "get": {
                "description": "List of providers for a registration.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "List of providers for a registration.",
                "operationId": "registrations_files_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/files/{provider}{path})": {
            "get": {
                "description": "List of files for a registration.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "path",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "provider",
                        "in": "path"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "List of files for a registration.",
                "operationId": "registrations_files_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/forks/": {
            "get": {
                "description": "Forks of the current registration. *Writeable*.\n\nPaginated list of the current node's forks ordered by their `forked_date`. Forks are copies of projects that you can\nchange without affecting the original project.  When creating a fork, your fork will will only contain public components or those\nfor which you are a contributor.  Private components that you do not have access to will not be forked.\n\n##Node Fork Attributes\n\n<!--- Copied Attributes from NodeDetail with exception of forked_date-->\n\nOSF Node Fork entities have the \"nodes\" `type`.\n\nname                        type               description\n===============================================================================================================================\ntitle                       string             title of project or component\ndescription                 string             description of the node\ncategory                    string             node category, must be one of the allowed values\ndate_created                iso8601 timestamp  timestamp that the node was created\ndate_modified               iso8601 timestamp  timestamp when the node was last updated\ntags                        array of strings   list of tags that describe the node\nregistration                boolean            has this project been registered? (always False)\ncollection                  boolean            is this node a collection (always False)\nfork                        boolean            is this node a fork of another node? (always True)\npublic                      boolean            has this node been made publicly-visible?\nforked_date                 iso8601 timestamp  timestamp when the node was forked\ncurrent_user_can_comment    boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions    array of strings   List of strings representing the permissions for the current user on this node\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n###Create Node Fork",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "Forks of the current registration. *Writeable*.",
                "operationId": "registrations_forks_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/identifiers/": {
            "get": {
                "description": "List of identifiers for a specified node. *Read-only*.\n\n##Identifier Attributes\n\nOSF Identifier entities have the \"identifiers\" `type`.\n\nname           type                   description\n----------------------------------------------------------------------------\ncategory       string                 e.g. 'ark', 'doi'\nvalue          string                 the identifier value itself\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "List of identifiers for a specified node. *Read-only*.",
                "operationId": "registrations_identifiers_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/institutions/": {
            "get": {
                "description": "List of the Institutions for a registration.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "List of the Institutions for a registration.",
                "operationId": "registrations_institutions_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/linked_nodes/": {
            "get": {
                "description": "List of linked nodes for a registration.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "List of linked nodes for a registration.",
                "operationId": "registrations_linked_nodes_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/logs/": {
            "get": {
                "description": "List of logs for a registration.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "List of logs for a registration.",
                "operationId": "registrations_logs_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/node_links/": {
            "get": {
                "description": "Node Links to other nodes. *Writeable*.\n\nNode Links act as pointers to other nodes. Unlike Forks, they are not copies of nodes;\nNode Links are a direct reference to the node that they point to.\n\n##Node Link Attributes\n`type` is \"node_links\"\n\nNone\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Relationships\n\n### Target Node\n\nThis endpoint shows the target node detail and is automatically embedded.\n\n##Actions\n\n###Adding Node Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "Node Links to other nodes. *Writeable*.",
                "operationId": "registrations_node_links_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/node_links/{node_link_id}/": {
            "get": {
                "description": "Node Link details. *Writeable*.\n\nNode Links act as pointers to other nodes. Unlike Forks, they are not copies of nodes;\nNode Links are a direct reference to the node that they point to.\n\n##Attributes\n`type` is \"node_links\"\n\nNone\n\n##Links\n\n*None*\n\n##Relationships\n\n###Target node\n\nThis endpoint shows the target node detail and is automatically embedded.\n\n##Actions\n\n###Remove Node Link",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_link_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "Node Link details. *Writeable*.",
                "operationId": "registrations_node_links_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/registrations/": {
            "get": {
                "description": "List of registrations of a registration.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "List of registrations of a registration.",
                "operationId": "registrations_registrations_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/relationships/linked_nodes/": {
            "get": {
                "description": "Relationship Endpoint for Nodes -> Linked Node relationships\n\nUsed to retrieve the ids of the linked nodes attached to this collection. For each id, there\nexists a node link that contains that node.\n\n##Actions",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "Relationship Endpoint for Nodes -> Linked Node relationships",
                "operationId": "registrations_relationships_linked_nodes_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/registrations/{node_id}/view_only_links/": {
            "get": {
                "tags": [
                    "registrations"
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "operationId": "registrations_view_only_links_list"
            }
        },
        "/registrations/{node_id}/view_only_links/{link_id}/": {
            "get": {
                "tags": [
                    "registrations"
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "link_id",
                        "in": "path"
                    }
                ],
                "operationId": "registrations_view_only_links_read"
            }
        },
        "/registrations/{node_id}/wikis/": {
            "get": {
                "description": "List of wikis for a registration.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "node_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "registrations"
                ],
                "summary": "List of wikis for a registration.",
                "operationId": "registrations_wikis_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/search/": {
            "get": {
                "description": "*Read-Only*\n\nObjects (including projects, components, registrations, users, and files) that have been found by the given\nElasticsearch query. Each object is serialized with the appropriate serializer for its type (files are serialized as\nfiles, users are serialized as users, etc.) and returned collectively.\n\n## Search Fields\n\n<type>  # either projects, components, registrations, users, or files\nrelated\nhref    # the canonical api endpoint to search within a certain object type, e.g `/v2/search/users/`\nmeta\ntotal   # the number of results found that are of the enclosing object type\n\n## Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n## Query Params\n\n+ `q=<Str>` -- Query to search projects, components, registrations, users, and files for.\n\n+ `page=<Int>` -- page number of results to view, default 1\n\n# This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "search"
                ],
                "summary": "*Read-Only*",
                "operationId": "search_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/search/components/": {
            "get": {
                "description": "*Read-Only*\n\nComponents that have been found by the given Elasticsearch query.\n\n<!--- Copied piel from NodeDetail -->\n\nOn the front end, nodes are considered 'projects' or 'components'. The difference between a project and a component\nis that a project is the top-level node, and components are children of the project. There is also a [category\nfield](/v2/#osf-node-categories) that includes 'project' as an option. The categorization essentially determines\nwhich icon is displayed by the node in the front-end UI and helps with search organization. Top-level nodes may have\na category other than project, and children nodes may have a category of project.\n\n##Node Attributes\n\n<!--- Copied Attributes from NodeDetail -->\n\nOSF Node entities have the \"nodes\" `type`.\n\nname                            type               description\n=================================================================================\ntitle                           string             title of project or component\ndescription                     string             description of the node\ncategory                        string             node category, must be one of the allowed values\ndate_created                    iso8601 timestamp  timestamp that the node was created\ndate_modified                   iso8601 timestamp  timestamp when the node was last updated\ntags                            array of strings   list of tags that describe the node\ncurrent_user_can_comment        boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions        array of strings   list of strings representing the permissions for the current user on this node\nregistration                    boolean            is this a registration? (always false - may be deprecated in future versions)\nfork                            boolean            is this node a fork of another node?\npublic                          boolean            has this node been made publicly-visible?\npreprint                        boolean            is this a preprint?\ncollection                      boolean            is this a collection? (always false - may be deprecated in future versions)\nnode_license                    object             details of the license applied to the node\nyear                        string             date range of the license\ncopyright_holders           array of strings   holders of the applied license\n\n##Relationships\n\n###Children\n\nList of nodes that are children of this node.  New child nodes may be added through this endpoint.\n\n###Comments\n\nList of comments on this node.  New comments can be left on the node through this endpoint.\n\n###Contributors\n\nList of users who are contributors to this node. Contributors may have \"read\", \"write\", or \"admin\" permissions.\nA node must always have at least one \"admin\" contributor.  Contributors may be added via this endpoint.\n\n###Draft Registrations\n\nList of draft registrations of the current node.\n\n###Files\n\nList of top-level folders (actually cloud-storage providers) associated with this node. This is the starting point\nfor accessing the actual files stored within this node.\n\n###Forked From\n\nIf this node was forked from another node, the canonical endpoint of the node that was forked from will be\navailable in the `/forked_from/links/related/href` key.  Otherwise, it will be null.\n\n###Logs\n\nList of read-only log actions pertaining to the node.\n\n###Node Links\n\nList of links (pointers) to other nodes on the OSF.  Node links can be added through this endpoint.\n\n###Parent\n\nIf this node is a child node of another node, the parent's canonical endpoint will be available in the\n`/parent/links/related/href` key.  Otherwise, it will be null.\n\n###Registrations\n\nList of registrations of the current node.\n\n###Root\n\nReturns the top-level node associated with the current node.  If the current node is the top-level node, the root is\nthe current node.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "search"
                ],
                "summary": "*Read-Only*",
                "operationId": "search_components_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/search/files/": {
            "get": {
                "description": "*Read-Only*\n\nFiles that have been found by the given Elasticsearch query.\n\n<!-- Copied attributes from FileDetail -->\n\n####File Entity\n\nname          type       description\n=========================================================================\nguid          string            OSF GUID for this file (if one has been assigned)\nname          string            name of the file\npath          string            unique identifier for this file entity for this\nproject and storage provider. may not end with '/'\nmaterialized  string            the full path of the file relative to the storage\nroot.  may not end with '/'\nkind          string            \"file\"\netag          string            etag - http caching identifier w/o wrapping quotes\nmodified      timestamp         last modified timestamp - format depends on provider\ncontentType   string            MIME-type when available\nprovider      string            id of provider e.g. \"osfstorage\", \"s3\", \"googledrive\".\nequivalent to addon_short_name on the OSF\nsize          integer           size of file in bytes\ntags          array of strings  list of tags that describes the file (osfstorage only)\nextra         object            may contain additional data beyond what's described here,\ndepending on the provider\nversion     integer           version number of file. will be 1 on initial upload\ndownloads   integer           count of the number times the file has been downloaded\nhashes      object\nmd5       string            md5 hash of file\nsha256    string            SHA-256 hash of file\n\n##Attributes\n\nFor an OSF File entity, the `type` is \"files\" regardless of whether the entity is actually a file or folder, because\nit belongs to the `files` collection of the API.  They can be distinguished by the `kind` attribute.  Files and\nfolders use the same representation, but some attributes may be null for one kind but not the other. `size` will be\nnull for folders.  A list of storage provider keys can be found [here](/v2/#storage-providers).\n\nname                        type               description\n================================================================================================================\nname                        string             name of the file or folder; used for display\nkind                        string             \"file\" or \"folder\"\npath                        string             same as for corresponding WaterButler entity\nmaterialized_path           string             the unix-style path to the file relative to the provider root\nsize                        integer            size of file in bytes, null for folders\nprovider                    string             storage provider for this file. \"osfstorage\" if stored on the\nOSF.  other examples include \"s3\" for Amazon S3, \"googledrive\"\nfor Google Drive, \"box\" for Box.com.\ncurrent_user_can_comment    boolean            Whether the current user is allowed to post comments\n\nlast_touched                iso8601 timestamp  last time the metadata for the file was retrieved. only\napplies to non-OSF storage providers.\ndate_modified               iso8601 timestamp  timestamp of when this file was last updated*\ndate_created                iso8601 timestamp  timestamp of when this file was created*\nextra                       object             may contain additional data beyond what's described here,\ndepending on the provider\nhashes                      object\nmd5                         string             md5 hash of file, null for folders\nsha256                      string             SHA-256 hash of file, null for folders\n\n* A note on timestamps: for files stored in osfstorage, `date_created` refers to the time the file was\nfirst uploaded to osfstorage, and `date_modified` is the time the file was last updated while in osfstorage.\nOther providers may or may not provide this information, but if they do it will correspond to the provider's\nsemantics for created/modified times.  These timestamps may also be stale; metadata retrieved via the File Detail\nendpoint is cached.  The `last_touched` field describes the last time the metadata was retrieved from the external\nprovider.  To force a metadata update, access the parent folder via its Node Files List endpoint.\n\n<!-- Copied relationships from FileDetail -->\n\n##Relationships\n\n###Node\n\nThe `node` endpoint describes the project or registration that this file belongs to.\n\n###Files (*folders*)\n\nThe `files` endpoint lists all of the subfiles and folders of the current folder. Will be null for files.\n\n###Versions (*files*)\n\nThe `versions` endpoint provides version history for files.  Will be null for folders.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "search"
                ],
                "summary": "*Read-Only*",
                "operationId": "search_files_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/search/projects/": {
            "get": {
                "description": "*Read-Only*\n\nProjects that have been found by the given Elasticsearch query.\n\n<!--- Copied spiel from NodeDetail -->\n\nOn the front end, nodes are considered 'projects' or 'components'. The difference between a project and a component\nis that a project is the top-level node, and components are children of the project. There is also a [category\nfield](/v2/#osf-node-categories) that includes 'project' as an option. The categorization essentially determines\nwhich icon is displayed by the node in the front-end UI and helps with search organization. Top-level nodes may have\na category other than project, and children nodes may have a category of project.\n\n##Node Attributes\n\n<!--- Copied Attributes from NodeDetail -->\n\nOSF Node entities have the \"nodes\" `type`.\n\nname                            type               description\n=================================================================================\ntitle                           string             title of project or component\ndescription                     string             description of the node\ncategory                        string             node category, must be one of the allowed values\ndate_created                    iso8601 timestamp  timestamp that the node was created\ndate_modified                   iso8601 timestamp  timestamp when the node was last updated\ntags                            array of strings   list of tags that describe the node\ncurrent_user_can_comment        boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions        array of strings   list of strings representing the permissions for the current user on this node\nregistration                    boolean            is this a registration? (always false - may be deprecated in future versions)\nfork                            boolean            is this node a fork of another node?\npublic                          boolean            has this node been made publicly-visible?\npreprint                        boolean            is this a preprint?\ncollection                      boolean            is this a collection? (always false - may be deprecated in future versions)\nnode_license                    object             details of the license applied to the node\nyear                        string             date range of the license\ncopyright_holders           array of strings   holders of the applied license\n\n##Relationships\n\n###Children\n\nList of nodes that are children of this node.  New child nodes may be added through this endpoint.\n\n###Comments\n\nList of comments on this node.  New comments can be left on the node through this endpoint.\n\n###Contributors\n\nList of users who are contributors to this node. Contributors may have \"read\", \"write\", or \"admin\" permissions.\nA node must always have at least one \"admin\" contributor.  Contributors may be added via this endpoint.\n\n###Draft Registrations\n\nList of draft registrations of the current node.\n\n###Files\n\nList of top-level folders (actually cloud-storage providers) associated with this node. This is the starting point\nfor accessing the actual files stored within this node.\n\n###Forked From\n\nIf this node was forked from another node, the canonical endpoint of the node that was forked from will be\navailable in the `/forked_from/links/related/href` key.  Otherwise, it will be null.\n\n###Logs\n\nList of read-only log actions pertaining to the node.\n\n###Node Links\n\nList of links (pointers) to other nodes on the OSF.  Node links can be added through this endpoint.\n\n###Parent\n\nIf this node is a child node of another node, the parent's canonical endpoint will be available in the\n`/parent/links/related/href` key.  Otherwise, it will be null.\n\n###Registrations\n\nList of registrations of the current node.\n\n###Root\n\nReturns the top-level node associated with the current node.  If the current node is the top-level node, the root is\nthe current node.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "search"
                ],
                "summary": "*Read-Only*",
                "operationId": "search_projects_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/search/registrations/": {
            "get": {
                "description": "*Read-Only*\n\nRegistrations that have been found by the given Elasticsearch query.\n\n<!--- Copied spiel from RegistrationDetail -->\n\nNode Registrations.\n\nRegistrations are read-only snapshots of a project. This view is a list of all current registrations for which a user\nhas access.  A withdrawn registration will display a limited subset of information, namely, title, description,\ndate_created, registration, withdrawn, date_registered, withdrawal_justification, and registration supplement. All\nother fields will be displayed as null. Additionally, the only relationships permitted to be accessed for a withdrawn\nregistration are the contributors - other relationships will return a 403.\n\nEach resource contains the full representation of the registration, meaning additional requests to an individual\nregistrations's detail view are not necessary.  Unregistered nodes cannot be accessed through this endpoint.\n\n<!--- Copied attributes from RegistrationDetail -->\n##Registration Attributes\n\nRegistrations have the \"registrations\" `type`.\n\nname                            type               description\n=======================================================================================================\ntitle                           string             title of the registered project or component\ndescription                     string             description of the registered node\ncategory                        string             bode category, must be one of the allowed values\ndate_created                    iso8601 timestamp  timestamp that the node was created\ndate_modified                   iso8601 timestamp  timestamp when the node was last updated\ntags                            array of strings   list of tags that describe the registered node\ncurrent_user_can_comment        boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions        array of strings   list of strings representing the permissions for the current user on this node\nfork                            boolean            is this project a fork?\nregistration                    boolean            has this project been registered? (always true - may be deprecated in future versions)\ncollection                      boolean            is this registered node a collection? (always false - may be deprecated in future versions)\nnode_license                    object             details of the license applied to the node\nyear                            string             date range of the license\ncopyright_holders               array of strings   holders of the applied license\npublic                          boolean            has this registration been made publicly-visible?\nwithdrawn                       boolean            has this registration been withdrawn?\ndate_registered                 iso8601 timestamp  timestamp that the registration was created\nembargo_end_date                iso8601 timestamp  when the embargo on this registration will be lifted (if applicable)\nwithdrawal_justification        string             reasons for withdrawing the registration\npending_withdrawal              boolean            is this registration pending withdrawal?\npending_withdrawal_approval     boolean            is this registration pending approval?\npending_embargo_approval        boolean            is the associated Embargo awaiting approval by project admins?\nregistered_meta                 dictionary         registration supplementary information\nregistration_supplement         string             registration template\n\n\n<!--- Copied relationships from RegistrationDetail -->\n##Relationships\n\n###Registered from\n\nThe registration is branched from this node.\n\n###Registered by\n\nThe registration was initiated by this user.\n\n###Other Relationships\n\nSee documentation on registered_from detail view.  A registration has many of the same properties as a node.\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n## Query Params\n\n+ `q=<Str>` -- Query to search registrations for, searches across a registration's title, description, tags, and contributor names.\n\n+ `page=<Int>` -- page number of results to view, default 1\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "search"
                ],
                "summary": "*Read-Only*",
                "operationId": "search_registrations_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/search/users/": {
            "get": {
                "description": "*Read-Only*\n\nUsers that have been found by the given Elasticsearch query.\n\n<!-- Copied spiel from UserDetail -->\n\nThe User Detail endpoint retrieves information about the user whose id is the final part of the path.  If `me`\nis given as the id, the record of the currently logged-in user will be returned.  The returned information includes\nthe user's bibliographic information and the date the user registered.\n\nNote that if an anonymous view_only key is being used, user information will not be serialized, and the id will be\nan empty string. Relationships to a user object will not show in this case, either.\n\n<!-- Copied attributes from UserDetail -->\n\n##Attributes\n\nOSF User entities have the \"users\" `type`.\n\nname               type               description\n========================================================================================\nfull_name          string             full name of the user; used for display\ngiven_name         string             given name of the user; for bibliographic citations\nmiddle_names       string             middle name of user; for bibliographic citations\nfamily_name        string             family name of user; for bibliographic citations\nsuffix             string             suffix of user's name for bibliographic citations\ndate_registered    iso8601 timestamp  timestamp when the user's account was created\n\n<!-- Copied relationships from UserDetail -->\n\n##Relationships\n\n###Nodes\n\nA list of all nodes the user has contributed to.  If the user id in the path is the same as the logged-in user, all\nnodes will be visible.  Otherwise, you will only be able to see the other user's publicly-visible nodes.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "search"
                ],
                "summary": "*Read-Only*",
                "operationId": "search_users_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/taxonomies/": {
            "get": {
                "description": "[PLOS taxonomy of subjects](http://journals.plos.org/plosone/browse/) in flattened form. *Read-only*\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future**\n\n##Taxonomy Attributes\n\nname           type                   description\n----------------------------------------------------------------------------\ntext           array of strings       Actual text of the subject\nparents        array of subjects      Parent subjects, [] indicates a top level subject.\n\n##Query Params\n\n+ `field['id']=<subject_id>` -- Finds one subject with the given id\n+ `field['text']=<Str>` -- Find subjects with texts that match the passed string\n\n+ `filter[<fieldname>]=<Str>` -- fields and values to filter the search results on.\n+ `filter['parents']=<subject_id>` -- Find subjects that have a parent with the id passed\n+ `filter['parents']=null` -- Find top level subjects\n\nSubjects may be filtered by their 'text', 'parents', and 'id' fields.\n\n**Note:** Subjects are unique (e.g. there exists only one object in this list with `text='Biology and life sciences'`),\nbut as per the structure of the PLOS taxonomy, subjects can exist in separate paths down the taxonomy and as such\ncan have multiple parent subjects.\n\nOnly the top three levels of the PLOS taxonomy are included.",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "taxonomies"
                ],
                "summary": "[PLOS taxonomy of subjects](http://journals.plos.org/plosone/browse/) in flattened form. *Read-only*",
                "operationId": "taxonomies_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/taxonomies/{taxonomy_id}/": {
            "get": {
                "description": "[PLOS taxonomy subject](http://journals.plos.org/plosone/browse/) instance. *Read-only*\n\n##Note\n**This API endpoint is under active development, and is subject to change in the future**\n\n##Taxonomy Attributes\n\nSee TaxonomyList\n\n**Note:** Subjects are unique (e.g. there exists only one object in this list with `text='Biology and life sciences'`),\nbut as per the structure of the PLOS taxonomy, subjects can exist in separate paths down the taxonomy and as such\ncan have multiple parent subjects.\n\nOnly the top three levels of the PLOS taxonomy are included.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "taxonomy_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "taxonomies"
                ],
                "summary": "[PLOS taxonomy subject](http://journals.plos.org/plosone/browse/) instance. *Read-only*",
                "operationId": "taxonomies_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "description": "List of users registered on the OSF.\n\nPaginated list of users ordered by the date they registered.  Each resource contains the full representation of the\nuser, meaning additional requests to an individual user's detail view are not necessary.\n\nNote that if an anonymous view_only key is being used, user information will not be serialized, and the id will be\nan empty string. Relationships to a user object will not show in this case, either.\n\nThe subroute [`/me/`](me/) is a special endpoint that always points to the currently logged-in user.\n\n##User Attributes\n\n<!--- Copied Attributes From UserDetail -->\n\nOSF User entities have the \"users\" `type`.\n\nname               type               description\n========================================================================================\nfull_name          string             full name of the user; used for display\ngiven_name         string             given name of the user; for bibliographic citations\nmiddle_names       string             middle name of user; for bibliographic citations\nfamily_name        string             family name of user; for bibliographic citations\nsuffix             string             suffix of user's name for bibliographic citations\ndate_registered    iso8601 timestamp  timestamp when the user's account was created\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n*None*.\n\n##Query Params\n\n+ `page=<Int>` -- page number of results to view, default 1\n\n+ `filter[<fieldname>]=<Str>` -- fields and values to filter the search results on.\n\nUsers may be filtered by their `id`, `full_name`, `given_name`, `middle_names`, or `family_name`.\n\n+ `profile_image_size=<Int>` -- Modifies `/links/profile_image_url` of the user entities so that it points to\nthe user's profile image scaled to the given size in pixels.  If left blank, the size depends on the image provider.\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "users"
                ],
                "summary": "List of users registered on the OSF.",
                "operationId": "users_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/users/{user_id}/": {
            "get": {
                "description": "Details about a specific user. *Writeable*.\n\nThe User Detail endpoint retrieves information about the user whose id is the final part of the path.  If `me`\nis given as the id, the record of the currently logged-in user will be returned.  The returned information includes\nthe user's bibliographic information and the date the user registered.\n\nNote that if an anonymous view_only key is being used, user information will not be serialized, and the id will be\nan empty string. Relationships to a user object will not show in this case, either.\n\n##Attributes\n\nOSF User entities have the \"users\" `type`.\n\nname               type               description\n========================================================================================\nfull_name          string             full name of the user; used for display\ngiven_name         string             given name of the user; for bibliographic citations\nmiddle_names       string             middle name of user; for bibliographic citations\nfamily_name        string             family name of user; for bibliographic citations\nsuffix             string             suffix of user's name for bibliographic citations\ndate_registered    iso8601 timestamp  timestamp when the user's account was created\n\n##Relationships\n\n###Nodes\n\nA list of all nodes the user has contributed to.  If the user id in the path is the same as the logged-in user, all\nnodes will be visible.  Otherwise, you will only be able to see the other user's publicly-visible nodes.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "user_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "users"
                ],
                "summary": "Details about a specific user. *Writeable*.",
                "operationId": "users_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/users/{user_id}/institutions/": {
            "get": {
                "tags": [
                    "users"
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "user_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "operationId": "users_institutions_list"
            }
        },
        "/users/{user_id}/nodes/": {
            "get": {
                "description": "List of nodes that the user contributes to. *Read-only*.\n\nPaginated list of nodes that the user contributes to ordered by `date_modified`.  User registrations are not available\nat this endpoint. Each resource contains the full representation of the node, meaning additional requests to an individual\nnode's detail view are not necessary. If the user id in the path is the same as the logged-in user, all nodes will be\nvisible.  Otherwise, you will only be able to see the other user's publicly-visible nodes.  The special user id `me`\ncan be used to represent the currently logged-in user.\n\n##Node Attributes\n\n<!--- Copied Attributes from NodeDetail -->\n\nOSF Node entities have the \"nodes\" `type`.\n\nname                            type               description\n=================================================================================\ntitle                           string             title of project or component\ndescription                     string             description of the node\ncategory                        string             node category, must be one of the allowed values\ndate_created                    iso8601 timestamp  timestamp that the node was created\ndate_modified                   iso8601 timestamp  timestamp when the node was last updated\ntags                            array of strings   list of tags that describe the node\ncurrent_user_can_comment        boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions        array of strings   list of strings representing the permissions for the current user on this node\nregistration                    boolean            is this a registration? (always false - may be deprecated in future versions)\nfork                            boolean            is this node a fork of another node?\npublic                          boolean            has this node been made publicly-visible?\ncollection                      boolean            is this a collection? (always false - may be deprecated in future versions)\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n*None*.\n\n##Query Params\n\n+ `page=<Int>` -- page number of results to view, default 1\n\n+ `filter[<fieldname>]=<Str>` -- fields and values to filter the search results on.\n\n<!--- Copied Query Params from NodeList -->\n\nNodes may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`,\n`root`, `parent`, and `contributors`.  Most are string fields and will be filtered using simple substring matching.  `public`\nis a boolean, and can be filtered using truthy values, such as `true`, `false`, `0`, or `1`.  Note that quoting `true`\nor `false` in the query will cause the match to fail regardless.  `tags` is an array of simple strings.\n\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "user_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "users"
                ],
                "summary": "List of nodes that the user contributes to. *Read-only*.",
                "operationId": "users_nodes_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/users/{user_id}/preprints/": {
            "get": {
                "tags": [
                    "users"
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "user_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "operationId": "users_preprints_list"
            }
        },
        "/users/{user_id}/registrations/": {
            "get": {
                "description": "List of registrations that the user contributes to. *Read-only*.\n\nPaginated list of registrations that the user contributes to.  Each resource contains the full representation of the\nregistration, meaning additional requests to an individual registration's detail view are not necessary. If the user\nid in the path is the same as the logged-in user, all nodes will be visible.  Otherwise, you will only be able to\nsee the other user's publicly-visible nodes.  The special user id `me` can be used to represent the currently\nlogged-in user.\n\nA withdrawn registration will display a limited subset of information, namely, title, description,\ndate_created, registration, withdrawn, date_registered, withdrawal_justification, and registration supplement. All\nother fields will be displayed as null. Additionally, the only relationships permitted to be accessed for a withdrawn\nregistration are the contributors - other relationships will return a 403.\n\n##Registration Attributes\n\n<!--- Copied Attributes from RegistrationList -->\n\nRegistrations have the \"registrations\" `type`.\n\nname                            type               description\n=======================================================================================================\ntitle                           string             title of the registered project or component\ndescription                     string             description of the registered node\ncategory                        string             bode category, must be one of the allowed values\ndate_created                    iso8601 timestamp  timestamp that the node was created\ndate_modified                   iso8601 timestamp  timestamp when the node was last updated\ntags                            array of strings   list of tags that describe the registered node\ncurrent_user_can_comment        boolean            Whether the current user is allowed to post comments\ncurrent_user_permissions        array of strings   list of strings representing the permissions for the current user on this node\nfork                            boolean            is this project a fork?\nregistration                    boolean            has this project been registered? (always true - may be deprecated in future versions)\ncollection                      boolean            is this registered node a collection? (always false - may be deprecated in future versions)\npublic                          boolean            has this registration been made publicly-visible?\nwithdrawn                       boolean            has this registration been withdrawn?\ndate_registered                 iso8601 timestamp  timestamp that the registration was created\nembargo_end_date                iso8601 timestamp  when the embargo on this registration will be lifted (if applicable)\nwithdrawal_justification        string             reasons for withdrawing the registration\npending_withdrawal              boolean            is this registration pending withdrawal?\npending_withdrawal_approval     boolean            is this registration pending approval?\npending_embargo_approval        boolean            is the associated Embargo awaiting approval by project admins?\nregistered_meta                 dictionary         registration supplementary information\nregistration_supplement         string             registration template\n\n\n##Relationships\n\n###Registered from\n\nThe registration is branched from this node.\n\n###Registered by\n\nThe registration was initiated by this user.\n\n###Other Relationships\n\nSee documentation on registered_from detail view.  A registration has many of the same properties as a node.\n\n##Links\n\nSee the [JSON-API spec regarding pagination](http://jsonapi.org/format/1.0/#fetching-pagination).\n\n##Actions\n\n*None*.\n\n##Query Params\n\n+ `page=<Int>` -- page number of results to view, default 1\n\n+ `filter[<fieldname>]=<Str>` -- fields and values to filter the search results on.\n\n<!--- Copied Query Params from NodeList -->\n\nRegistrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`,\n`root`, `parent`, and `contributors`.  Most are string fields and will be filtered using simple substring matching.  `public`\nis a boolean, and can be filtered using truthy values, such as `true`, `false`, `0`, or `1`.  Note that quoting `true`\nor `false` in the query will cause the match to fail regardless.  `tags` is an array of simple strings.\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "user_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "users"
                ],
                "summary": "List of registrations that the user contributes to. *Read-only*.",
                "operationId": "users_registrations_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/users/{user_id}/relationships/institutions/": {
            "get": {
                "tags": [
                    "users"
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "user_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "operationId": "users_relationships_institutions_list"
            }
        },
        "/view_only_links/{link_id}/": {
            "get": {
                "description": "Details about a specific view only link. *Read-only*.\n\n###Permissions\n\nView only links are visible only to users that are administrators on all of the nodes which a view only link\npertains to.\n\n##Attributes\n\nOSF view only links entities have the \"view-only-links\" `type`.\n\nname                        type                    description\n======================================================================================================\nname                        string                  name of the view only link\nanonymous                   boolean                 whether the view only link has anonymized contributors\ndate_created                iso8601 timestamp       timestamp when the view only link was created\nkey                         string                  the view only key\n\n\n##Relationships\n\n###Creator\n\nThe user who created the view only link.\n\n###Nodes\n\nThe nodes which this view only link key gives read-only access to.\n\n##Query Params\n\n*None*.\n\n#This Request/Response",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "link_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "view_only_links"
                ],
                "summary": "Details about a specific view only link. *Read-only*.",
                "operationId": "view_only_links_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/view_only_links/{link_id}/nodes/": {
            "get": {
                "tags": [
                    "view_only_links"
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "link_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "operationId": "view_only_links_nodes_list"
            }
        },
        "/view_only_links/{link_id}/relationships/nodes/": {
            "get": {
                "description": "Relationship Endpoint for VOL -> Nodes Relationship\n\nUsed to set, update, and retrieve the nodes associated with a view only link.\n\n##Actions\n\n###Create",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "link_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "view_only_links"
                ],
                "summary": "Relationship Endpoint for VOL -> Nodes Relationship",
                "operationId": "view_only_links_relationships_nodes_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/wikis/{wiki_id}/": {
            "get": {
                "description": "Details about a specific wiki. *Read-only*.\n\n###Permissions\n\nWiki pages on public nodes are given read-only access to everyone. Wiki pages on private nodes are only visible to\ncontributors and administrators on the parent node.\n\nNote that if an anonymous view_only key is being used, the user relationship will not be exposed.\n\n##Attributes\n\nOSF wiki entities have the \"wikis\" `type`.\n\nname                        type                   description\n======================================================================================================\nname                        string             name of the wiki pag\npath                        string             the path of the wiki page\nmaterialized_path           string             the path of the wiki page\ndate_modified               iso8601 timestamp  timestamp when the wiki was last updated\ncontent_type                string             MIME-type\ncurrent_user_can_comment    boolean            Whether the current user is allowed to post comments\nextra                       object\nversion                     integer            version number of the wiki\n\n\n##Relationships\n\n###User\n\nThe user who created the wiki.\n\n###Node\n\nThe project that the wiki page belongs to.\n\n###Comments\n\nThe comments created on the wiki page.\n\n##Links",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "wiki_id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "wikis"
                ],
                "summary": "Details about a specific wiki. *Read-only*.",
                "operationId": "wikis_read",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/wikis/{wiki_id}/content/": {
            "get": {
                "description": "View for rendering wiki page content.",
                "parameters": [
                    {
                        "description": "",
                        "required": true,
                        "type": "string",
                        "name": "wiki_id",
                        "in": "path"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "page[size]",
                        "in": "query"
                    },
                    {
                        "description": "",
                        "required": false,
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "tags": [
                    "wikis"
                ],
                "summary": "View for rendering wiki page content.",
                "operationId": "wikis_content_list",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        }
    },
    "definitions": {
        "Preprint": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "date_created": {
                    "type": "string",
                    "format": "date-time"
                },
                "date_modified": {
                    "type": "string",
                    "format": "date-time"
                },
                "date_published": {
                    "type": "string",
                    "format": "date-time"
                },
                "doi": {
                    "type": "string"
                },
                "is_published": {
                    "type": "boolean"
                },
                "is_preprint_orphan": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "basic": {
            "type": "basic"
        }
    }
}
